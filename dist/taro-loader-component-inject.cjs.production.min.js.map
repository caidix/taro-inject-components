{"version":3,"file":"taro-loader-component-inject.cjs.production.min.js","sources":["../src/utils/consts.ts","../src/inject.ts","../src/utils/index.ts","../src/utils/ast-helper.ts","../src/commons/components-handler.ts","../src/commons/ast-inject-handler.ts","../src/index.ts"],"sourcesContent":["import { InjectComponentOptions, InjectOptions, TARO_ENV } from \"../types\";\r\nimport * as path from \"path\";\r\n\r\nexport const LOADER_NAME = \"taro-loader-component-inject\";\r\n\r\nexport const DEFAULT_INJECT_OPTIONS: InjectOptions = {\r\n  enable: false,\r\n  includePages: [],\r\n  excludePages: [],\r\n  componentsPath: path.resolve(process.cwd(), \"src/_inject\"),\r\n};\r\n\r\nexport const DEFAULT_COMPONENT_CONFIG: InjectComponentOptions = {\r\n  entry: \"index.tsx\",\r\n  injectPosition: \"bottom\",\r\n  includePages: [],\r\n  excludePages: [],\r\n  enable: true,\r\n};\r\n\r\n/** Taro 环境变量 */\r\nexport const ENV = (process.env.TARO_ENV as TARO_ENV) || \"\";\r\n\r\nexport const UNINJECT_TAGS = {\r\n  webView: true,\r\n};\r\n","import { printLog, processTypeEnum } from \"@tarojs/helper\";\r\nimport { ComponentOptionArray, InjectOptions } from \"./types\";\r\nimport { crytoCode, verdictExclude, verdictInclude } from \"./utils\";\r\nimport { code2ast, ast2code, getDefaultExportNode } from \"./utils/ast-helper\";\r\nimport {\r\n  filterInjectedComponents,\r\n  getGlobalComponents,\r\n} from \"./commons/components-handler\";\r\nimport {\r\n  injectImportTaroBlockComponent,\r\n  injectImportComponents,\r\n  injectComponentTag,\r\n} from \"./commons/ast-inject-handler\";\r\n\r\n// 全局组件配置缓存 - 运行过程中理论上只需要获取一次全局配置\r\nlet globalComponentConfigs: ComponentOptionArray;\r\n\r\n// 页面缓存， 多次执行插件内容容易爆栈\r\nconst cachedPageCode = new Map();\r\n\r\n/**\r\n * 自动注入全局组件\r\n * @param {string} source 页面字符串源码\r\n * @param {object} options 用户传入全局配置项\r\n * @param {string} filePath 当前页面路径参数\r\n * @param {string} pagePath 小程序路由路径参数\r\n * @param {object} webpackAlias Webpack alias代理设置\r\n */\r\nfunction handleInjectComponents(\r\n  source: string,\r\n  options: InjectOptions,\r\n  filePath: string,\r\n  pagePath: string,\r\n  webpackAlias: Record<string, string>\r\n) {\r\n  if (!options.enable) {\r\n    return source;\r\n  }\r\n\r\n  // taro 低版本进行二次编译，跳出\r\n  if (\r\n    source.includes(\"/*#__PURE__*/\") ||\r\n    source.includes(\"react/jsx-runtime\")\r\n  ) {\r\n    return source;\r\n  }\r\n\r\n  const originFileHash = crytoCode(source);\r\n  if (cachedPageCode.get(originFileHash)) {\r\n    // console.log(\"导出缓存\");\r\n    return cachedPageCode.get(originFileHash);\r\n  }\r\n\r\n  // 全局级别过滤无需注入的页面\r\n  if (verdictExclude(options.excludePages, pagePath)) return source;\r\n\r\n  // 全局级别过滤保留注入的页面\r\n  if (!verdictInclude(options.includePages, pagePath)) return source;\r\n\r\n  // 注入全局组件配置信息\r\n  if (!globalComponentConfigs) {\r\n    const configs = getGlobalComponents(options.componentsPath || \"\", pagePath);\r\n    globalComponentConfigs = configs;\r\n  }\r\n\r\n  if (!globalComponentConfigs.length) return source;\r\n\r\n  const ast = code2ast(source);\r\n  const exportDefaultNode = getDefaultExportNode(ast);\r\n\r\n  if (!exportDefaultNode) {\r\n    printLog(\r\n      processTypeEnum.WARNING,\r\n      `找不到默认导出,页面组件应通过全局默认导出(export default XX)，该页( ${pagePath} )将跳过自动插入全局组件`,\r\n      filePath\r\n    );\r\n    return source;\r\n  }\r\n\r\n  const finallyInjectComponent = filterInjectedComponents(\r\n    ast,\r\n    filePath,\r\n    globalComponentConfigs,\r\n    Object.entries(webpackAlias)\r\n  );\r\n  injectImportTaroBlockComponent(ast);\r\n  injectImportComponents(ast, finallyInjectComponent);\r\n  injectComponentTag(\r\n    exportDefaultNode.get(\"declaration\"),\r\n    finallyInjectComponent,\r\n    filePath\r\n  );\r\n\r\n  const injectedSource = ast2code(ast);\r\n  const newFileHash = crytoCode(injectedSource);\r\n  cachedPageCode.set(newFileHash, injectedSource);\r\n  cachedPageCode.set(originFileHash, injectedSource);\r\n\r\n  return injectedSource;\r\n}\r\n\r\nexport default handleInjectComponents;\r\n","import { minimatch } from \"minimatch\";\r\nimport * as crypto from \"crypto\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { ENV } from \"./consts\";\r\n\r\nexport function validateTypes(param: any, type: string) {\r\n  const toString = Object.prototype.toString;\r\n  return toString.call(param).slice(8, -1) === type;\r\n}\r\n\r\n/**\r\n * 从一组页面路径定义数组中判断有没有命中指定的文件路径,\r\n * 默认为 false\r\n * @param {string[]} pages 页面相对路径 or Glob规则字串数组\r\n * @param {string} pagePath 页面 router 相对路径\r\n * @return {boolean}\r\n */\r\nexport const verdictExclude = (\r\n  pages: string[] | undefined,\r\n  pagePath: string\r\n) => {\r\n  if (!pages || !pages.length) return false;\r\n  return !!pages.find((page) => minimatch(pagePath, page));\r\n};\r\n\r\n/**\r\n * 从一组页面路径定义数组中判断有没有命中指定的文件路径,\r\n * 默认为 true\r\n * @param {string[]} pages 页面相对路径 or Glob规则字串数组\r\n * @param {string} pagePath 页面 router 相对路径\r\n * @return {boolean}\r\n */\r\nexport const verdictInclude = (\r\n  pages: string[] | undefined,\r\n  pagePath: string\r\n) => {\r\n  if (!pages || !pages.length) return true;\r\n  return !!pages.find((page) => minimatch(pagePath, page));\r\n};\r\n\r\n/**\r\n * 过滤校验逻辑\r\n * @param {*} config\r\n * @param {*} pagePath\r\n * @returns {boolean}\r\n */\r\nexport const verdictPass = (config, pagePath) => {\r\n  let { excludePages = [], includePages = [], injectEnv } = config;\r\n\r\n  if (typeof injectEnv === \"string\") {\r\n    injectEnv = [injectEnv];\r\n  }\r\n\r\n  // 运行环境过滤\r\n  if (injectEnv && injectEnv.length) {\r\n    if (!injectEnv.includes(ENV)) {\r\n      return true;\r\n    }\r\n  }\r\n  // 页面过滤\r\n  if (verdictExclude(excludePages, pagePath)) return true;\r\n  if (!verdictInclude(includePages, pagePath)) return true;\r\n  return false;\r\n};\r\n\r\n/** 唯一值 */\r\nexport const crytoCode = (code) => {\r\n  const hash = crypto.createHash(\"md5\");\r\n  hash.update(code, \"utf8\");\r\n  return hash.digest(\"hex\");\r\n};\r\n\r\n/**\r\n * 生成唯一键字符串\r\n * @param len 生成唯一键的长度\r\n * @returns {string}\r\n */\r\nexport const randomString = (len?: number) => {\r\n  const length: number = len || 32;\r\n  const $chars = \"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\";\r\n  const maxPos = $chars.length;\r\n  let pwd = \"\";\r\n  for (let i = 0; i < length; i++) {\r\n    pwd += $chars.charAt(Math.floor(Math.random() * maxPos));\r\n  }\r\n  return pwd + `${new Date().getTime()}`;\r\n};\r\n\r\n/**\r\n * 去掉变量中的所有非法符号,并将命名转换成大驼峰格式,\r\n * 用于引入组件名和插入组件标签的生成, 默认为 InjectGlobalComp(XXXX)\r\n * @param {*} name\r\n * @return {*} string\r\n */\r\nexport const toUpperCamelCase = (name) => {\r\n  try {\r\n    return (\r\n      name\r\n        // 转换成小驼峰\r\n        .replace(/[_-](\\w)/g, (_, $1) => $1.toUpperCase())\r\n        // 转换首字母\r\n        .replace(/^.*?(\\w)/, (_, $1) => $1.toUpperCase())\r\n        // 去掉所有不合法的符号\r\n        .replace(/[^a-zA-Z]/g, \"\")\r\n    );\r\n  } catch (error) {\r\n    console.log(`转换 ${name} 默认组件名称失败: ${error}`);\r\n    return `InjectGlobalComp${randomString(4)}`;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取文件所在目录\r\n * @description path.sep: 提供特定于平台的路径片段分隔符\r\n * @param {*} stringPath window下路径通常为\\\\ ，别的系统为/\r\n * @return {*}\r\n */\r\nexport const getDirPathFromFilePath = (stringPath) => {\r\n  const parts = stringPath.split(path.sep);\r\n  parts.pop();\r\n  return parts.join(path.sep);\r\n};\r\n\r\n/**\r\n * 文件路径转绝对路径\r\n * @param {*} importPath 文件引入中采用的路径\r\n * @param {*} filePath 文件的路径\r\n * @param {*} aliasMaping webpack配置的alias; [\r\n    '@tarojs/components$',\r\n    '@tarojs/plugin-platform-tt/dist/components-react'\r\n  ][]\r\n * @returns\r\n */\r\nexport const toAbsolutePath = (\r\n  importPath: string,\r\n  filePath: string,\r\n  aliasMaping: [string, string][]\r\n) => {\r\n  let absolutePath = importPath;\r\n\r\n  if (path.isAbsolute(importPath)) {\r\n    absolutePath = importPath;\r\n  } else if (/^\\.{1,2}\\//.test(importPath)) {\r\n    // 相对路径转绝对路径\r\n    absolutePath = path.resolve(getDirPathFromFilePath(filePath), importPath);\r\n  } else {\r\n    for (const [aKey, aPath] of aliasMaping) {\r\n      if (!importPath.startsWith(aKey)) continue;\r\n      absolutePath = importPath.replace(aKey, aPath);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // 格式化路径\r\n  absolutePath = path.normalize(absolutePath);\r\n  const parsePath = path.parse(absolutePath);\r\n\r\n  if (parsePath.ext) return absolutePath;\r\n  // 添加后缀， 优先采用tsx的文件 次采用.jsx\r\n  if (fs.existsSync(`${absolutePath}.${ENV}.tsx`))\r\n    return absolutePath + `.${ENV}.tsx`;\r\n  if (fs.existsSync(absolutePath + \".tsx\")) return absolutePath + \".tsx\";\r\n  if (fs.existsSync(`${absolutePath}${path.sep}index.${ENV}.tsx`))\r\n    return `${absolutePath}${path.sep}index.${ENV}.tsx`;\r\n  if (fs.existsSync(absolutePath + path.sep + \"index.tsx\"))\r\n    return absolutePath + path.sep + \"index.tsx\";\r\n\r\n  if (fs.existsSync(absolutePath + `.${ENV}.jsx`))\r\n    return absolutePath + `.${ENV}.jsx`;\r\n  if (fs.existsSync(absolutePath + \".jsx\")) return absolutePath + \".jsx\";\r\n  if (fs.existsSync(`${absolutePath}${path.sep}index.${ENV}.jsx`))\r\n    return `${absolutePath}${path.sep}index.${ENV}.jsx`;\r\n  if (fs.existsSync(absolutePath + path.sep + \"index.jsx\"))\r\n    return absolutePath + path.sep + \"index.jsx\";\r\n\r\n  return absolutePath;\r\n};\r\n","// AST 辅助函数集\r\nimport generate from \"@babel/generator\";\r\nimport parser from \"@babel/parser\";\r\nimport traverse from \"@babel/traverse\";\r\nimport { NodePath } from \"@babel/traverse\";\r\nimport t from \"@babel/types\";\r\nimport { AstCodes } from \"../types\";\r\n\r\nexport const code2ast = (source: string): AstCodes => {\r\n  return parser.parse(source, {\r\n    sourceType: \"module\",\r\n    ranges: true,\r\n    plugins: [\"jsx\", \"typescript\", \"classProperties\"],\r\n  });\r\n};\r\n\r\nexport const ast2code = (ast: AstCodes): string => {\r\n  return generate(ast).code;\r\n};\r\n\r\n/**\r\n * 创建 jSXElement nodePath\r\n * https://babeljs.io/docs/babel-types#jsxelement\r\n * @param {*} name\r\n * @return {*}\r\n */\r\nexport const createJSXElement = (name) => {\r\n  return t.jSXElement(\r\n    t.jSXOpeningElement(t.jsxIdentifier(\"\" + name), [], true),\r\n    null,\r\n    [],\r\n    true\r\n  );\r\n};\r\n\r\n/**\r\n * 创建 React.createElement nodePath\r\n * https://babeljs.io/docs/babel-types#identifier\r\n * @param {*} name\r\n * @return {*}\r\n */\r\nexport const createReactCallExpression = (name) => {\r\n  // 创建React、createElement两个函数node\r\n  const reactIdentifier = t.identifier(\"React\");\r\n  const createElementIdentifier = t.identifier(\"createElement\");\r\n  // 为React函数prototype增加createElement\r\n  const callee = t.memberExpression(reactIdentifier, createElementIdentifier);\r\n  // 将我们要创建的组件当参传入成return <name />函数\r\n  return t.callExpression(callee, [t.identifier(name)]);\r\n};\r\n\r\ntype ExportNode = NodePath<t.ExportDefaultDeclaration> | undefined;\r\n/**\r\n * 获取默认导出块\r\n * @description 默认页面组件到处时应采用 export default XX 的形式导出\r\n * @param {*} ast\r\n */\r\nexport const getDefaultExportNode = (ast: AstCodes): ExportNode => {\r\n  let _node: ExportNode;\r\n  traverse(ast, {\r\n    ExportDefaultDeclaration(node) {\r\n      _node = node;\r\n      node.stop();\r\n    },\r\n  });\r\n  return _node;\r\n};\r\n/**\r\n * 为组件包裹一个View标签: <Content /> => <View><Content /></View>\r\n * @param {*} node\r\n * @returns {*} 此时返回的根节点为<View></View>\r\n */\r\nexport const wrapJSXClosingElement = (pathNode) => {\r\n  const fragments = t.jsxElement(\r\n    t.jsxOpeningElement(t.jsxIdentifier(\"View\"), []),\r\n    t.jsxClosingElement(t.jsxIdentifier(\"View\")),\r\n    [pathNode.node]\r\n  );\r\n  pathNode.replaceWith(fragments);\r\n};\r\n\r\n/**\r\n * 获取页面节点相关的详细绑定信息（通过绑定的路径获取-binding.path）\r\n * 用于获取指定变量名所对应的内容实例，如传入 name1 索引获取 const name1 = () => {} path实例\r\n * @param {*} node\r\n * @param {*} name 变量名\r\n * @returns {*}\r\n */\r\nexport const getBindingNode = (pathNode, name) => {\r\n  try {\r\n    const _path = pathNode.scope.bindings[name].path;\r\n    return _path;\r\n  } catch (error) {\r\n    return void 0;\r\n  }\r\n};\r\n\r\n/**\r\n * 遍历生成AST对象|数组\r\n * @param {*} obj\r\n * @returns\r\n */\r\nexport const generateAST = (obj) => {\r\n  if (Array.isArray(obj)) {\r\n    // 如果是数组类型，则递归处理每个元素\r\n    const elements = obj.map(generateAST);\r\n    return t.arrayExpression(elements);\r\n  } else if (typeof obj === \"object\" && obj !== null) {\r\n    // 如果是对象类型，则递归处理每个属性\r\n    const properties = Object.entries(obj).map(([key, value]) => {\r\n      const keyNode = t.isValidIdentifier(key)\r\n        ? t.identifier(key)\r\n        : t.stringLiteral(key);\r\n      const valueNode = generateAST(value);\r\n      return t.objectProperty(keyNode, valueNode);\r\n    });\r\n    return t.objectExpression(properties);\r\n  } else if (typeof obj === \"string\") {\r\n    // 如果是字符串类型，则创建字符串字面量节点\r\n    return t.stringLiteral(obj);\r\n  } else if (typeof obj === \"number\") {\r\n    // 如果是数字类型，则创建数字字面量节点\r\n    return t.numericLiteral(obj);\r\n  } else if (typeof obj === \"boolean\") {\r\n    // 如果是布尔类型，则创建布尔字面量节点\r\n    return t.booleanLiteral(obj);\r\n  } else if (obj === null) {\r\n    // 如果是 null，则创建 null 字面量节点\r\n    return t.nullLiteral();\r\n  } else if (obj === undefined) {\r\n    // 如果是 undefined，则创建 undefined 字面量节点\r\n    return t.identifier(\"undefined\");\r\n  } else {\r\n    throw new Error(`Unsupported object type: ${typeof obj}`);\r\n  }\r\n};\r\n\r\n/**\r\n * 遍历合成两个AST Object对象\r\n * @param {*} obj1\r\n * @param {*} obj2\r\n * @returns\r\n */\r\nexport const mergeASTObjects = (obj1, obj2) => {\r\n  if (obj1.type === \"ObjectExpression\" && obj2.type === \"ObjectExpression\") {\r\n    const mergedProperties = new Map();\r\n\r\n    // 将 obj1 的属性添加到 mergedProperties\r\n    for (const prop of obj1.properties) {\r\n      if (prop.type === \"ObjectProperty\") {\r\n        mergedProperties.set(prop.key.name, prop);\r\n      }\r\n    }\r\n    // 将 obj2 的属性合并或添加到 mergedProperties\r\n    for (const prop of obj2.properties) {\r\n      if (prop.type === \"ObjectProperty\") {\r\n        const propName = prop.key.name;\r\n        if (mergedProperties.has(propName)) {\r\n          // 如果属性已存在，则合并值\r\n          const existingProp = mergedProperties.get(propName);\r\n          existingProp.value = mergeASTObjects(existingProp.value, prop.value);\r\n        } else {\r\n          // 否则添加属性\r\n          mergedProperties.set(propName, prop);\r\n        }\r\n      }\r\n    }\r\n    // 将 mergedProperties 转换为属性数组\r\n    const mergedPropsArray = Array.from(mergedProperties.values());\r\n\r\n    // 返回合并后的对象\r\n    return t.objectExpression(mergedPropsArray);\r\n  } else {\r\n    // 如果不是对象类型，则返回 obj2\r\n    return obj2;\r\n  }\r\n};\r\n","/** 公共注入组件操作函数集 */\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport traverse from \"@babel/traverse\";\r\nimport { toAbsolutePath, toUpperCamelCase, verdictPass } from \"../utils\";\r\nimport { DEFAULT_COMPONENT_CONFIG, ENV } from \"../utils/consts\";\r\nimport { ComponentOptionArray, AstCodes } from \"../types\";\r\n\r\nconst customFileAlias = (\r\n  process.env.INJECT_COMPONENT_ALIAS || \"\"\r\n).toLocaleLowerCase();\r\n\r\ntype ParsedPath = Omit<path.ParsedPath, \"base\"> & {\r\n  base?: string;\r\n};\r\n\r\nexport const getGlobalComponents = (\r\n  componentFilePath: string,\r\n  pagePath: string\r\n) => {\r\n  if (!fs.existsSync(componentFilePath)) return [];\r\n\r\n  const compsDir = fs.readdirSync(componentFilePath);\r\n  const retConfig: ComponentOptionArray = [];\r\n  // 全局组件路径-配置枚举\r\n  retConfig.__import_path__ = {};\r\n\r\n  for (const compDirName of compsDir) {\r\n    const compDir = path.join(componentFilePath, compDirName);\r\n    const stat = fs.statSync(compDir);\r\n    if (!stat.isDirectory()) continue;\r\n\r\n    const configPath = path.join(compDir, \"config.json\");\r\n    let configCustomPath = path.join(compDir, `config.${customFileAlias}.json`);\r\n    const comConfig = { ...DEFAULT_COMPONENT_CONFIG };\r\n\r\n    // 获取组件级别配置信息 - 优先获取config.{自定义私有化参}.json的数据\r\n    try {\r\n      if (!fs.existsSync(configCustomPath)) {\r\n        if (!fs.existsSync(configPath)) {\r\n          throw new Error(\"组件配置不存在\");\r\n        }\r\n        configCustomPath = configPath;\r\n      }\r\n\r\n      const config = JSON.parse(\r\n        fs.readFileSync(configCustomPath, { encoding: \"utf-8\" })\r\n      );\r\n      Object.assign(comConfig, config);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    // 组件/文件名转驼峰并增加注入前缀，避免出现重名的问题\r\n    comConfig.tagName = toUpperCamelCase(comConfig.tagName || compDirName);\r\n    comConfig.tagName = `Inject_${comConfig.tagName}`;\r\n\r\n    // 入口路径绝对化\r\n    comConfig.entry = path.normalize(path.join(compDir, comConfig.entry));\r\n    let entryParse: ParsedPath = path.parse(comConfig.entry);\r\n    const afterExt = entryParse.name.split(\".\")[1];\r\n    let hasEnvPage = false;\r\n\r\n    if (!afterExt && ENV) {\r\n      entryParse.name = entryParse.name + \".\" + ENV;\r\n      delete entryParse[\"base\"];\r\n      const envEntry = path.format(entryParse);\r\n\r\n      if (fs.existsSync(envEntry)) {\r\n        comConfig.entry = envEntry;\r\n        hasEnvPage = true;\r\n      }\r\n    }\r\n    if (!hasEnvPage && !fs.existsSync(comConfig.entry)) continue;\r\n\r\n    /**\r\n     * 单组件级别页面过滤\r\n     */\r\n    if (verdictPass(comConfig, pagePath) || !comConfig.enable) continue;\r\n\r\n    retConfig.push({\r\n      ...comConfig,\r\n    });\r\n\r\n    retConfig.__import_path__[comConfig.entry] = comConfig;\r\n  }\r\n\r\n  return retConfig;\r\n};\r\n\r\n/**\r\n * 过滤已经被引入的全局组件\r\n * @param {*} comConfigs\r\n * @param {*} ast\r\n * @param {*} alias\r\n */\r\nexport const filterInjectedComponents = (\r\n  ast: AstCodes,\r\n  filePath: string,\r\n  comConfigs: ComponentOptionArray,\r\n  aliasMaping: [string, string][]\r\n): ComponentOptionArray => {\r\n  const importPathMap = Object.assign({}, comConfigs.__import_path__);\r\n  let remainComp = comConfigs.length;\r\n\r\n  traverse(ast, {\r\n    // 将import的路径替换成绝对路径后与组件的绝对路径进行比对，查看是否为同一引入\r\n    ImportDeclaration(fileNode) {\r\n      const absolutePath = toAbsolutePath(\r\n        fileNode.node.source.value,\r\n        filePath,\r\n        aliasMaping\r\n      );\r\n      if (importPathMap[absolutePath]) {\r\n        delete importPathMap[absolutePath];\r\n        remainComp--;\r\n      }\r\n      if (remainComp <= 0) {\r\n        fileNode.stop();\r\n      }\r\n    },\r\n  });\r\n\r\n  const newConfigs: ComponentOptionArray = Object.values(importPathMap);\r\n  newConfigs.__import_path__ = importPathMap;\r\n  return newConfigs;\r\n};\r\n","// @ts-nocheck\r\n/**\r\n * AST实现注入流程集\r\n */\r\nimport * as path from \"path\";\r\nimport traverse, { NodePath } from \"@babel/traverse\";\r\nimport template from \"@babel/template\";\r\nimport t from \"@babel/types\";\r\nimport { processTypeEnum, printLog } from \"@tarojs/helper\";\r\nimport {\r\n  wrapJSXClosingElement,\r\n  createJSXElement,\r\n  createReactCallExpression,\r\n  getBindingNode,\r\n} from \"../utils/ast-helper\";\r\nimport { UNINJECT_TAGS } from \"../utils/consts\";\r\nimport { AstCodes, ComponentOptionArray } from \"src/types\";\r\n\r\n/**\r\n * 将全局组件以 import xx from \"xx\" 的形式注入页面\r\n * @param {AstCodes} ast\r\n * @param {ComponentOptionArray} comConfigs\r\n */\r\nexport const injectImportComponents = (\r\n  ast: AstCodes,\r\n  comConfigs: ComponentOptionArray\r\n) => {\r\n  for (const com of comConfigs) {\r\n    try {\r\n      const entry = com.entry.split(path.sep).join(\"/\");\r\n      const astCom = template.ast(`import ${com.tagName} from '${entry}';`);\r\n      ast.program.body.unshift(astCom);\r\n      // printLog(processTypeEnum.CREATE, `注入 ${com.tagName} 组件成功`);\r\n    } catch (error) {\r\n      printLog(processTypeEnum.ERROR, `注入 ${com.tagName} 组件失败: ${error}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 注入JSX元素\r\n * @param {*} pathNode argument为 JSXElement 类型的 ReturnStatement 实例\r\n * @param {*} comConfigs\r\n * @returns\r\n */\r\nconst injectJSXElement = (pathNode, comConfigs) => {\r\n  if (!t.isJSXElement(pathNode) && !t.isJSXFragment(pathNode)) return;\r\n  if (UNINJECT_TAGS[pathNode.node?.openingElement?.name?.name || \"\"]) return;\r\n\r\n  wrapJSXClosingElement(pathNode);\r\n\r\n  for (const com of comConfigs) {\r\n    if (com.injectPosition === \"top\") {\r\n      pathNode.node.children.unshift(createJSXElement(com.tagName));\r\n    } else {\r\n      pathNode.node.children.push(createJSXElement(com.tagName));\r\n    }\r\n  }\r\n};\r\n\r\nconst injectCallExpression = (pathNode, comConfigs, filePath) => {\r\n  // CreateElement只有最后的...children接收额外传入ReactNode，故默认只采用push形式\r\n  if (pathNode.node?.callee?.property?.name === \"createElement\") {\r\n    const _arguments = pathNode.node.arguments;\r\n    for (const com of comConfigs) {\r\n      _arguments.push(createReactCallExpression(com.tagName));\r\n    }\r\n    return;\r\n  }\r\n  const pathBody = pathNode.get(\"callee\").get(\"body\");\r\n  if (pathBody.isBlockStatement()) {\r\n    handleReturnStatement(pathBody, comConfigs, filePath);\r\n  } else {\r\n    injectJSXElement(pathBody, comConfigs);\r\n  }\r\n};\r\n\r\nconst handleInjectArgumentFromType = (\r\n  argumentPaths,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string,\r\n  done?: () => void\r\n) => {\r\n  if (!argumentPaths) {\r\n    return;\r\n  }\r\n  // return <xxx></xxx> 已认证\r\n  if (t.isJSXElement(argumentPaths) || t.isJSXFragment(argumentPaths)) {\r\n    injectJSXElement(argumentPaths, comConfigs);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return a > 0 ? <XX/> : null; 已认证\r\n  if (t.isConditionalExpression(argumentPaths)) {\r\n    const consequent = argumentPaths.get(\"consequent\");\r\n    const alternate = argumentPaths.get(\"alternate\");\r\n    handleInjectArgumentFromType(consequent, comConfigs, filePath, done);\r\n    handleInjectArgumentFromType(alternate, comConfigs, filePath, done);\r\n    return;\r\n  }\r\n\r\n  // return React?.createElement -- 不接受 createElement, 兼容特殊函数场景\r\n  if (t.isCallExpression(argumentPaths)) {\r\n    injectCallExpression(argumentPaths, comConfigs, filePath);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return { ComponentXX }\r\n  if (t.isObjectExpression(argumentPaths)) {\r\n    injectJSXElement(argumentPaths, comConfigs);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return aa && ComponentXX || ComponentYY\r\n  if (t.isLogicalExpression(argumentPaths)) {\r\n    const left = argumentPaths.get(\"left\");\r\n    const right = argumentPaths.get(\"right\");\r\n    handleInjectArgumentFromType(left, comConfigs, filePath, done);\r\n    handleInjectArgumentFromType(right, comConfigs, filePath, done);\r\n    return;\r\n  }\r\n\r\n  if (t.isTSAsExpression(argumentPaths)) {\r\n    handleTSAsExpression(argumentPaths, comConfigs, filePath);\r\n    return;\r\n  }\r\n\r\n  if (t.isIdentifier(argumentPaths)) {\r\n    handleIdentifier(argumentPaths, comConfigs, filePath);\r\n    return;\r\n  }\r\n\r\n  if (t.isVariableDeclarator(argumentPaths)) {\r\n    handleVariableDeclarator(argumentPaths, comConfigs, filePath);\r\n  }\r\n};\r\n\r\n/**\r\n * 处理返回体代码中的 return 逻辑\r\n * @param {*} pathNode  XXFunction.body\r\n * @param {*} comConfigs\r\n * @returns {*}\r\n */\r\nconst handleReturnStatement = (\r\n  pathNode: NodePath<any>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  try {\r\n    let canInject = false;\r\n    const u = pathNode.get(\"body\") as NodePath<t.BlockStatement>;\r\n    const bodyList = u.get(\"body\");\r\n    bodyList.forEach((_node) => {\r\n      if (t.isReturnStatement(_node) && !canInject) {\r\n        // 注入 -- 只针对函数最外层的 return 做处理\r\n        canInject = true;\r\n\r\n        _node.node.__GLOBAL__COMPONENT__ = \"__GLOBAL__COMPONENT__\";\r\n        const argumentPaths = _node.get(\"argument\");\r\n        handleInjectArgumentFromType(\r\n          argumentPaths,\r\n          comConfigs,\r\n          filePath,\r\n          () => {\r\n            _node.skip();\r\n          }\r\n        );\r\n      }\r\n      // @ts-ignore\r\n      if (t.isIfStatement(_node)) {\r\n        handleReturnStatement(_node, comConfigs, filePath);\r\n        return;\r\n      }\r\n    });\r\n  } catch (error) {}\r\n};\r\n\r\n/**\r\n * 处理ts断言类型 (xx) as any => (<>xx<myComponent/></>) as any\r\n * @returns\r\n */\r\nconst handleTSAsExpression = (pathNode, comConfigs, filePath) => {\r\n  if (pathNode.node?.expression?.name) {\r\n    return injectComponentTag(\r\n      getBindingNode(pathNode, pathNode.node.expression.name),\r\n      comConfigs,\r\n      filePath\r\n    );\r\n  }\r\n  return handleInjectArgumentFromType(\r\n    pathNode.get(\"expression\"),\r\n    comConfigs,\r\n    filePath\r\n  );\r\n};\r\n\r\n/**\r\n * 处理 Class 类型中的render返回体， 默认 render() { return } 形式\r\n */\r\nconst handleClass = (pathNode, compConfigs, filePath) => {\r\n  traverse(\r\n    pathNode.node,\r\n    {\r\n      ClassMethod(_node) {\r\n        if (_node.node.key?.name !== \"render\") return;\r\n        handleReturnStatement(_node, compConfigs, filePath);\r\n        _node.stop();\r\n      },\r\n    },\r\n    pathNode.scope,\r\n    pathNode\r\n  );\r\n};\r\n\r\nconst handleIdentifier = (\r\n  pathNode: NodePath<t.Identifier>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  // 获取 export default XX 中的 XX\r\n  const exportComName = pathNode.node.name;\r\n  return injectComponentTag(\r\n    getBindingNode(pathNode, exportComName),\r\n    comConfigs,\r\n    filePath\r\n  );\r\n};\r\n\r\n/**\r\n * 处理 export default 为箭头函数时的 return；\r\n */\r\nconst handleArrowFunctionExpression = (\r\n  functionNode: NodePath<t.ArrowFunctionExpression>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  const functionBody = functionNode.get(\"body\");\r\n  // () => xx  OR () => { return xx } OR () => React.CreateElement\r\n  if (t.isBlockStatement(functionBody.node)) {\r\n    handleReturnStatement(functionNode, comConfigs, filePath);\r\n    return;\r\n  }\r\n  if (t.isCallExpression(functionBody.node)) {\r\n    injectComponentTag(functionNode, comConfigs, filePath);\r\n    return;\r\n  }\r\n  injectJSXElement(functionBody, comConfigs);\r\n};\r\n\r\n/**\r\n * 处理字面量类型\r\n * 作为页面组件，其VariableDeclarator对应类型下的init值应为ArrowFunctionExpression类型\r\n */\r\nconst handleVariableDeclarator = (\r\n  pathNode: NodePath<t.VariableDeclarator>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  const valuePathNode = pathNode.get(\"init\");\r\n  return injectComponentTag(valuePathNode, comConfigs, filePath);\r\n};\r\n\r\n/**\r\n * 将代码块注入文件 --- function|class|字面量时处理，其余递归至符合要求\r\n * @description 我们将遍历该页面直至最后获取导出的 ArrowFunctionExpression | FunctionDeclaration | FunctionExpression | ClassDeclaration | ClassExpression 类型做插入\r\n * @param {*} pathNode 导出 AST Path 实例对象,在babel中为 NodePath 对象，包含了具体信息\r\n * @param {*} comConfigs\r\n */\r\nexport const injectComponentTag = (\r\n  pathNode: NodePath<any>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  if (!pathNode || !pathNode.node) return;\r\n  switch (pathNode.node.type) {\r\n    case \"Identifier\": // 处理字面量|变量\r\n      handleIdentifier(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"VariableDeclarator\": // 处理字面量函数\r\n      handleVariableDeclarator(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"ArrowFunctionExpression\": // 处理箭头函数\r\n      handleArrowFunctionExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"FunctionDeclaration\": // 处理函数 function xx() { return }\r\n    case \"FunctionExpression\": // 处理匿名函数 const xx = function() { return }\r\n      handleReturnStatement(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"TSAsExpression\": // 处理Ts断言 const i = Component as string;\r\n      handleTSAsExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"ClassDeclaration\":\r\n    case \"ClassExpression\":\r\n      handleClass(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"CallExpression\":\r\n      injectCallExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"JSXElement\": // 特殊情况 - () => {const I = <></>; return I } 时触发\r\n      injectJSXElement(pathNode, comConfigs);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n/**\r\n * 插入一个 import { View } from '@tarojs/components' 语句\r\n * @param {AstCodes} ast\r\n */\r\nexport const injectImportTaroBlockComponent = (ast: AstCodes) => {\r\n  let taroComponentsImported = false;\r\n  traverse(ast, {\r\n    ImportDeclaration: (__path) => {\r\n      if (__path.node.source.value !== \"@tarojs/components\") return;\r\n\r\n      taroComponentsImported = true;\r\n      let blockComponentImported = __path.node.specifiers?.find(\r\n        (node) => node.local.name === \"View\"\r\n      );\r\n      if (blockComponentImported) {\r\n        __path.stop();\r\n        return;\r\n      }\r\n\r\n      const specifierNames = __path.node.specifiers.map((sp) => sp.local.name);\r\n      specifierNames.push(\"View\");\r\n      const importAst = template.ast(\r\n        `import {${specifierNames.join(\",\")}} from '@tarojs/components'`\r\n      );\r\n      __path.replaceWith(importAst);\r\n      __path.stop();\r\n    },\r\n  });\r\n\r\n  if (taroComponentsImported) return;\r\n\r\n  const importAst = template.ast(`import { View } from '@tarojs/components'`);\r\n  ast.program.body.unshift(importAst);\r\n};\r\n","import { getOptions } from \"loader-utils\";\r\nimport handleInjectComponents from \"./inject\";\r\nimport { DEFAULT_INJECT_OPTIONS } from \"./utils/consts\";\r\nimport { printLog, processTypeEnum, META_TYPE } from \"@tarojs/helper\";\r\nimport { validateTypes } from \"./utils\";\r\n\r\n/**\r\n * Page Cache\r\n * Taro 旧版本会多次编译并丢失一些属性，需要提前将已有数据缓存\r\n * https://github.com/NervJS/taro/pull/14380\r\n */\r\nconst cachedPages = new Map<string, Record<string, string>>();\r\n\r\nexport default function(source) {\r\n  let options = getOptions(this);\r\n  if (options && !validateTypes(options, \"Object\")) {\r\n    printLog(\r\n      processTypeEnum.ERROR,\r\n      \"\\n❌ 全局注入插件加载失败 :: options 必须为 Object 类型\"\r\n    );\r\n    return;\r\n  }\r\n  // printLog(\r\n  //   processTypeEnum.ERROR,\r\n  //   \"\\n❌ 全局注入插件加载失败 :: options 必须为 Object 类型\"\r\n  // );\r\n  options = {\r\n    ...DEFAULT_INJECT_OPTIONS,\r\n    ...options,\r\n  };\r\n\r\n  const { resourcePath: filePath, _module = {} } = this;\r\n\r\n  const cachedModules = cachedPages.get(filePath) || {};\r\n  const miniType = _module.miniType || cachedModules.miniType;\r\n  const pagePath = _module.name || cachedModules.name;\r\n\r\n  if (!miniType) {\r\n    return source;\r\n  }\r\n\r\n  if ([META_TYPE.PAGE].includes(miniType)) {\r\n    cachedPages.set(filePath, { miniType, name: pagePath });\r\n    const webpackAlias = this._compiler.options?.resolve?.alias;\r\n\r\n    try {\r\n      return handleInjectComponents(\r\n        source,\r\n        options,\r\n        filePath,\r\n        pagePath,\r\n        webpackAlias\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n      return source;\r\n    }\r\n  }\r\n\r\n  return source;\r\n}\r\n"],"names":["globalComponentConfigs","DEFAULT_INJECT_OPTIONS","enable","includePages","excludePages","componentsPath","path","process","cwd","DEFAULT_COMPONENT_CONFIG","entry","injectPosition","ENV","env","TARO_ENV","UNINJECT_TAGS","webView","verdictExclude","pages","pagePath","length","find","page","minimatch","verdictInclude","verdictPass","config","_config$excludePages","_config$includePages","injectEnv","includes","crytoCode","code","hash","crypto","update","digest","toUpperCamelCase","name","replace","_","$1","toUpperCase","error","console","log","len","$chars","maxPos","pwd","i","charAt","Math","floor","random","Date","getTime","randomString","createJSXElement","t","jSXElement","jSXOpeningElement","jsxIdentifier","getBindingNode","pathNode","scope","bindings","customFileAlias","INJECT_COMPONENT_ALIAS","toLocaleLowerCase","injectJSXElement","comConfigs","isJSXElement","isJSXFragment","_pathNode$node","node","openingElement","fragments","jsxElement","jsxOpeningElement","jsxClosingElement","replaceWith","wrapJSXClosingElement","_step2","_iterator2","_createForOfIteratorHelperLoose","done","com","value","children","unshift","tagName","push","injectCallExpression","filePath","_pathNode$node2","callee","property","reactIdentifier","createElementIdentifier","pathBody","get","isBlockStatement","handleReturnStatement","_step3","_arguments","arguments","_iterator3","identifier","memberExpression","callExpression","handleInjectArgumentFromType","argumentPaths","isConditionalExpression","consequent","alternate","isCallExpression","isObjectExpression","isLogicalExpression","left","right","isTSAsExpression","handleTSAsExpression","isIdentifier","handleIdentifier","isVariableDeclarator","handleVariableDeclarator","canInject","forEach","_node","isReturnStatement","__GLOBAL__COMPONENT__","skip","isIfStatement","_pathNode$node3","expression","injectComponentTag","valuePathNode","type","functionNode","functionBody","handleArrowFunctionExpression","compConfigs","traverse","ClassMethod","_node$node$key","key","stop","handleClass","cachedPageCode","Map","cachedPages","source","options","getOptions","this","Object","prototype","toString","call","slice","_extends","resourcePath","_this$_module","_module","cachedModules","miniType","META_TYPE","PAGE","_this$_compiler$optio","set","webpackAlias","_compiler","resolve","alias","originFileHash","configs","componentFilePath","fs","compsDir","retConfig","__import_path__","_step","_iterator","compDirName","compDir","isDirectory","configPath","configCustomPath","comConfig","Error","JSON","parse","encoding","assign","entryParse","hasEnvPage","split","envEntry","getGlobalComponents","ast","parser","sourceType","ranges","plugins","code2ast","exportDefaultNode","ExportDefaultDeclaration","getDefaultExportNode","printLog","finallyInjectComponent","aliasMaping","importPathMap","remainComp","ImportDeclaration","fileNode","absolutePath","importPath","parts","test","pop","join","_step$value","aKey","aPath","startsWith","ext","toAbsolutePath","newConfigs","values","filterInjectedComponents","entries","taroComponentsImported","__path","_path$node$specifier","specifiers","local","specifierNames","map","sp","importAst","template","program","body","injectImportTaroBlockComponent","astCom","injectImportComponents","injectedSource","generate","ast2code","newFileHash","handleInjectComponents"],"mappings":"y5CAKO,ICUHA,EDVSC,EAAwC,CACnDC,QAAQ,EACRC,aAAc,GACdC,aAAc,GACdC,eAAgBC,UAAaC,QAAQC,MAAO,gBAGjCC,EAAmD,CAC9DC,MAAO,YACPC,eAAgB,SAChBR,aAAc,GACdC,aAAc,GACdF,QAAQ,GAIGU,EAAOL,QAAQM,IAAIC,UAAyB,GAE5CC,EAAgB,CAC3BC,SAAS,GENEC,EAAiB,SAC5BC,EACAC,GAEA,SAAKD,IAAUA,EAAME,SACZF,EAAMG,MAAK,SAACC,GAAI,OAAKC,YAAUJ,EAAUG,QAUvCE,EAAiB,SAC5BN,EACAC,GAEA,OAAKD,IAAUA,EAAME,UACZF,EAAMG,MAAK,SAACC,GAAI,OAAKC,YAAUJ,EAAUG,OASvCG,EAAc,SAACC,EAAQP,GAClC,IAAAQ,EAA0DD,EAApDtB,aAAAA,WAAYuB,EAAG,GAAEA,EAAAC,EAAmCF,EAAjCvB,aAAAA,WAAYyB,EAAG,GAAEA,EAAEC,EAAcH,EAAdG,UAO5C,MALyB,iBAAdA,IACTA,EAAY,CAACA,OAIXA,IAAaA,EAAUT,QACpBS,EAAUC,SAASlB,OAKtBK,EAAeb,EAAce,KAC5BK,EAAerB,EAAcgB,IAKvBY,EAAY,SAACC,GACxB,IAAMC,EAAOC,aAAkB,OAE/B,OADAD,EAAKE,OAAOH,EAAM,QACXC,EAAKG,OAAO,QAyBRC,EAAmB,SAACC,GAC/B,IACE,OACEA,EAEGC,QAAQ,aAAa,SAACC,EAAGC,GAAE,OAAKA,EAAGC,iBAEnCH,QAAQ,YAAY,SAACC,EAAGC,GAAE,OAAKA,EAAGC,iBAElCH,QAAQ,aAAc,IAE3B,MAAOI,GAEP,OADAC,QAAQC,UAAUP,gBAAkBK,sBA7BZ,SAACG,GAK3B,IAJA,IACMC,EAAS,mDACTC,EAASD,EAAO3B,OAClB6B,EAAM,GACDC,EAAI,EAAGA,EAyByB,EAzBbA,IAC1BD,GAAOF,EAAOI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAElD,OAAOC,MAAS,IAAIM,MAAOC,UAsBCC,KClFjBC,EAAmB,SAACpB,GAC/B,OAAOqB,EAAEC,WACPD,EAAEE,kBAAkBF,EAAEG,cAAc,GAAKxB,GAAO,IAAI,GACpD,KACA,IACA,IAyDSyB,EAAiB,SAACC,EAAU1B,GACvC,IAEE,OADc0B,EAASC,MAAMC,SAAS5B,GAAMhC,KAE5C,MAAOqC,GACP,SCrFEwB,GACJ5D,QAAQM,IAAIuD,wBAA0B,IACtCC,oBCmCIC,EAAmB,SAACN,EAAUO,SAClC,IAAKZ,EAAEa,aAAaR,IAAcL,EAAEc,cAAcT,MAC9CjD,UAAc2D,EAAAV,EAASW,cAAID,EAAbA,EAAeE,wBAAcF,EAA7BA,EAA+BpC,aAA/BoC,EAAqCpC,OAAQ,IAA/D,EFyBmC,SAAC0B,GACpC,IAAMa,EAAYlB,EAAEmB,WAClBnB,EAAEoB,kBAAkBpB,EAAEG,cAAc,QAAS,IAC7CH,EAAEqB,kBAAkBrB,EAAEG,cAAc,SACpC,CAACE,EAASW,OAEZX,EAASiB,YAAYJ,GE7BrBK,CAAsBlB,GAEtB,QAA4BmB,EAA5BC,EAAAC,EAAkBd,KAAUY,EAAAC,KAAAE,MAAE,CAAA,IAAnBC,EAAGJ,EAAAK,MACe,QAAvBD,EAAI5E,eACNqD,EAASW,KAAKc,SAASC,QAAQhC,EAAiB6B,EAAII,UAEpD3B,EAASW,KAAKc,SAASG,KAAKlC,EAAiB6B,EAAII,aAKjDE,EAAuB,SAAC7B,EAAUO,EAAYuB,SAElD,GAA8C,0BAA1CC,EAAA/B,EAASW,cAAIoB,EAAbA,EAAeC,gBAAMD,EAArBA,EAAuBE,iBAAvBF,EAAiCzD,MAArC,CFrBuC,IAACA,EAElC4D,EACAC,EAEAH,EEuBAI,EAAWpC,EAASqC,IAAI,UAAUA,IAAI,QACxCD,EAASE,mBACXC,EAAsBH,EAAU7B,EAAYuB,GAE5CxB,EAAiB8B,EAAU7B,QAT3B,IADA,IAC4BiC,EADtBC,EAAazC,EAASW,KAAK+B,UACjCC,EAAAtB,EAAkBd,KAAUiC,EAAAG,KAAArB,MAC1BmB,EAAWb,MFxByBtD,EEuBxBkE,EAAAhB,MACkCG,QFtB5CO,EAAkBvC,EAAEiD,WAAW,SAC/BT,EAA0BxC,EAAEiD,WAAW,iBAEvCZ,EAASrC,EAAEkD,iBAAiBX,EAAiBC,GAE5CxC,EAAEmD,eAAed,EAAQ,CAACrC,EAAEiD,WAAWtE,QE6B1CyE,EAA+B,SAA/BA,EACJC,EACAzC,EACAuB,EACAR,GAEA,GAAK0B,EAAL,CAIA,GAAIrD,EAAEa,aAAawC,IAAkBrD,EAAEc,cAAcuC,GAGnD,OAFA1C,EAAiB0C,EAAezC,QAChCe,GAAQA,KAKV,GAAI3B,EAAEsD,wBAAwBD,GAAgB,CAC5C,IAAME,EAAaF,EAAcX,IAAI,cAC/Bc,EAAYH,EAAcX,IAAI,aAGpC,OAFAU,EAA6BG,EAAY3C,EAAYuB,EAAUR,QAC/DyB,EAA6BI,EAAW5C,EAAYuB,EAAUR,GAKhE,GAAI3B,EAAEyD,iBAAiBJ,GAGrB,OAFAnB,EAAqBmB,EAAezC,EAAYuB,QAChDR,GAAQA,KAKV,GAAI3B,EAAE0D,mBAAmBL,GAGvB,OAFA1C,EAAiB0C,EAAezC,QAChCe,GAAQA,KAKV,GAAI3B,EAAE2D,oBAAoBN,GAAgB,CACxC,IAAMO,EAAOP,EAAcX,IAAI,QACzBmB,EAAQR,EAAcX,IAAI,SAGhC,OAFAU,EAA6BQ,EAAMhD,EAAYuB,EAAUR,QACzDyB,EAA6BS,EAAOjD,EAAYuB,EAAUR,GAIxD3B,EAAE8D,iBAAiBT,GACrBU,EAAqBV,EAAezC,EAAYuB,GAI9CnC,EAAEgE,aAAaX,GACjBY,EAAiBZ,EAAezC,EAAYuB,GAI1CnC,EAAEkE,qBAAqBb,IACzBc,EAAyBd,EAAezC,EAAYuB,KAUlDS,EAAwB,SAAxBA,EACJvC,EACAO,EACAuB,GAEA,IACE,IAAIiC,GAAY,EACN/D,EAASqC,IAAI,QACJA,IAAI,QACd2B,SAAQ,SAACC,GAChB,GAAItE,EAAEuE,kBAAkBD,KAAWF,EAAW,CAE5CA,GAAY,EAEZE,EAAMtD,KAAKwD,sBAAwB,wBACnC,IAAMnB,EAAgBiB,EAAM5B,IAAI,YAChCU,EACEC,EACAzC,EACAuB,GACA,WACEmC,EAAMG,UAKRzE,EAAE0E,cAAcJ,IAClB1B,EAAsB0B,EAAO1D,EAAYuB,MAI7C,MAAOnD,MAOL+E,EAAuB,SAAC1D,EAAUO,EAAYuB,SAClD,cAAAwC,EAAItE,EAASW,cAAI2D,EAAbA,EAAeC,aAAfD,EAA2BhG,KACtBkG,EACLzE,EAAeC,EAAUA,EAASW,KAAK4D,WAAWjG,MAClDiC,EACAuB,GAGGiB,EACL/C,EAASqC,IAAI,cACb9B,EACAuB,IAsBE8B,EAAmB,SACvB5D,EACAO,EACAuB,GAIA,OAAO0C,EACLzE,EAAeC,EAFKA,EAASW,KAAKrC,MAGlCiC,EACAuB,IA6BEgC,EAA2B,SAC/B9D,EACAO,EACAuB,GAEA,IAAM2C,EAAgBzE,EAASqC,IAAI,QACnC,OAAOmC,EAAmBC,EAAelE,EAAYuB,IAS1C0C,EAAqB,SAChCxE,EACAO,EACAuB,GAEA,GAAK9B,GAAaA,EAASW,KAC3B,OAAQX,EAASW,KAAK+D,MACpB,IAAK,aACHd,EAAiB5D,EAAUO,EAAYuB,GACvC,MACF,IAAK,qBACHgC,EAAyB9D,EAAUO,EAAYuB,GAC/C,MACF,IAAK,2BAlD6B,SACpC6C,EACApE,EACAuB,GAEA,IAAM8C,EAAeD,EAAatC,IAAI,QAElC1C,EAAE2C,iBAAiBsC,EAAajE,MAClC4B,EAAsBoC,EAAcpE,EAAYuB,GAG9CnC,EAAEyD,iBAAiBwB,EAAajE,MAClC6D,EAAmBG,EAAcpE,EAAYuB,GAG/CxB,EAAiBsE,EAAcrE,GAoC3BsE,CAA8B7E,EAAUO,EAAYuB,GACpD,MACF,IAAK,sBACL,IAAK,qBACHS,EAAsBvC,EAAUO,EAAYuB,GAC5C,MACF,IAAK,iBACH4B,EAAqB1D,EAAUO,EAAYuB,GAC3C,MACF,IAAK,mBACL,IAAK,mBA7FW,SAAC9B,EAAU8E,EAAahD,GAC1CiD,EACE/E,EAASW,KACT,CACEqE,qBAAYf,SACmB,mBAAzBgB,EAAAhB,EAAMtD,KAAKuE,YAAXD,EAAgB3G,QACpBiE,EAAsB0B,EAAOa,EAAahD,GAC1CmC,EAAMkB,UAGVnF,EAASC,MACTD,GAmFEoF,CAAYpF,EAAUO,EAAYuB,GAClC,MACF,IAAK,iBACHD,EAAqB7B,EAAUO,EAAYuB,GAC3C,MACF,IAAK,aACHxB,EAAiBN,EAAUO,KJ5R3B8E,EAAiB,IAAIC,IKPrBC,EAAc,IAAID,oBAExB,SAAwBE,GACtB,IAAIC,EAAUC,aAAWC,MACzB,IAAIF,GAAmC,WJRtBG,OAAOC,UAAUC,SAClBC,KIOcN,GJPFO,MAAM,GAAI,GIOtC,CAWAP,EAAOQ,KACFhK,EACAwJ,GAGL,IAAsB3D,EAA2B6D,KAAzCO,aAAYC,EAA6BR,KAAjBS,QAAAA,WAAOD,EAAG,GAAEA,EAEtCE,EAAgBd,EAAYlD,IAAIP,IAAa,GAC7CwE,EAAWF,EAAQE,UAAYD,EAAcC,SAC7CnJ,EAAWiJ,EAAQ9H,MAAQ+H,EAAc/H,KAE/C,IAAKgI,EACH,OAAOd,EAGT,GAAI,CAACe,YAAUC,MAAM1I,SAASwI,GAAW,CAAA,IAAAG,EACvClB,EAAYmB,IAAI5E,EAAU,CAAEwE,SAAAA,EAAUhI,KAAMnB,IAC5C,IAAMwJ,SAAYF,EAAGd,KAAKiB,UAAUnB,iBAAOgB,EAAtBA,EAAwBI,gBAAxBJ,EAAiCK,MAEtD,IACE,OLlBN,SACEtB,EACAC,EACA3D,EACA3E,EACAwJ,GAEA,IAAKlB,EAAQvJ,OACX,OAAOsJ,EAIT,GACEA,EAAO1H,SAAS,kBAChB0H,EAAO1H,SAAS,qBAEhB,OAAO0H,EAGT,IAAMuB,EAAiBhJ,EAAUyH,GACjC,GAAIH,EAAehD,IAAI0E,GAErB,OAAO1B,EAAehD,IAAI0E,GAI5B,GAAI9J,EAAewI,EAAQrJ,aAAce,GAAW,OAAOqI,EAG3D,IAAKhI,EAAeiI,EAAQtJ,aAAcgB,GAAW,OAAOqI,EAG5D,IAAKxJ,EAAwB,CAC3B,IAAMgL,EG7CyB,SACjCC,EACA9J,GAEA,IAAK+J,aAAcD,GAAoB,MAAO,GAE9C,IAAME,EAAWD,cAAeD,GAC1BG,EAAkC,GAExCA,EAAUC,gBAAkB,GAE5B,QAAkCC,EAAlCC,EAAAlG,EAA0B8F,KAAQG,EAAAC,KAAAjG,MAAE,CAAA,IAAzBkG,EAAWF,EAAA9F,MACdiG,EAAUnL,OAAU2K,EAAmBO,GAE7C,GADaN,WAAYO,GACfC,cAAV,CAEA,IAAMC,EAAarL,OAAUmL,EAAS,eAClCG,EAAmBtL,OAAUmL,YAAmBtH,WAC9C0H,EAAS5B,KAAQxJ,GAGvB,IACE,IAAKyK,aAAcU,GAAmB,CACpC,IAAKV,aAAcS,GACjB,MAAM,IAAIG,MAAM,WAElBF,EAAmBD,EAGrB,IAAMjK,EAASqK,KAAKC,MAClBd,eAAgBU,EAAkB,CAAEK,SAAU,WAEhDrC,OAAOsC,OAAOL,EAAWnK,GACzB,MAAOiB,GACPC,QAAQD,MAAMA,GAIhBkJ,EAAUlG,QAAUtD,EAAiBwJ,EAAUlG,SAAW6F,GAC1DK,EAAUlG,kBAAoBkG,EAAUlG,QAGxCkG,EAAUnL,MAAQJ,YAAeA,OAAUmL,EAASI,EAAUnL,QAC9D,IAAIyL,EAAyB7L,QAAWuL,EAAUnL,OAE9C0L,GAAa,EAEjB,IAHiBD,EAAW7J,KAAK+J,MAAM,KAAK,IAG3BzL,EAAK,CACpBuL,EAAW7J,KAAO6J,EAAW7J,KAAO,IAAM1B,SACnCuL,EAAiB,KACxB,IAAMG,EAAWhM,SAAY6L,GAEzBjB,aAAcoB,KAChBT,EAAUnL,MAAQ4L,EAClBF,GAAa,IAGZA,GAAelB,aAAcW,EAAUnL,UAKxCe,EAAYoK,EAAW1K,IAAc0K,EAAU3L,SAEnDkL,EAAUxF,KAAIqE,KACT4B,IAGLT,EAAUC,gBAAgBQ,EAAUnL,OAASmL,IAG/C,OAAOT,EH1BWmB,CAAoB9C,EAAQpJ,gBAAkB,GAAIc,GAClEnB,EAAyBgL,EAG3B,IAAKhL,EAAuBoB,OAAQ,OAAOoI,EAE3C,IAAMgD,EE3DgB,SAAChD,GACvB,OAAOiD,EAAOT,MAAMxC,EAAQ,CAC1BkD,WAAY,SACZC,QAAQ,EACRC,QAAS,CAAC,MAAO,aAAc,qBFuDrBC,CAASrD,GACfsD,EEX4B,SAACN,GACnC,IAAIvE,EAOJ,OANAc,EAASyD,EAAK,CACZO,kCAAyBpI,GACvBsD,EAAQtD,EACRA,EAAKwE,UAGFlB,EFGmB+E,CAAqBR,GAE/C,IAAKM,EAMH,OALAG,qEAEkD9L,kBAChD2E,GAEK0D,EAGT,IAAM0D,EGiBgC,SACtCV,EACA1G,EACAvB,EACA4I,GAEA,IAAMC,EAAgBxD,OAAOsC,OAAO,GAAI3H,EAAW8G,iBAC/CgC,EAAa9I,EAAWnD,OAE5B2H,EAASyD,EAAK,CAEZc,2BAAkBC,GAChB,IAAMC,EF0BkB,SAC5BC,EACA3H,EACAqH,GAEA,IApBMO,EAoBFF,EAAeC,EAEnB,GAAInN,aAAgBmN,GAClBD,EAAeC,OACV,GAAI,aAAaE,KAAKF,GAE3BD,EAAelN,YA1BXoN,EA0B+C5H,EA1B5BuG,MAAM/L,QACzBsN,MACCF,EAAMG,KAAKvN,QAwB8CmN,QAE9D,QAAuCnC,EAAvCC,EAAAlG,EAA4B8H,KAAW7B,EAAAC,KAAAjG,MAAE,CAAA,IAAAwI,EAAAxC,EAAA9F,MAA7BuI,EAAID,KAAEE,EAAKF,KACrB,GAAKL,EAAWQ,WAAWF,GAA3B,CACAP,EAAeC,EAAWlL,QAAQwL,EAAMC,GACxC,OAQJ,OAHAR,EAAelN,YAAekN,GACZlN,QAAWkN,GAEfU,IAAYV,EAEtBtC,aAAiBsC,MAAgB5M,UAC5B4M,MAAmB5M,SACxBsK,aAAcsC,EAAe,QAAgBA,EAAe,OAC5DtC,gBAAiBsC,EAAelN,eAAiBM,aACzC4M,EAAelN,eAAiBM,SACxCsK,aAAcsC,EAAelN,MAAW,aACnCkN,EAAelN,MAAW,YAE/B4K,aAAcsC,MAAmB5M,UAC5B4M,MAAmB5M,SACxBsK,aAAcsC,EAAe,QAAgBA,EAAe,OAC5DtC,gBAAiBsC,EAAelN,eAAiBM,aACzC4M,EAAelN,eAAiBM,SACxCsK,aAAcsC,EAAelN,MAAW,aACnCkN,EAAelN,MAAW,YAE5BkN,EEpEkBW,CACnBZ,EAAS5I,KAAK6E,OAAOhE,MACrBM,EACAqH,GAEEC,EAAcI,YACTJ,EAAcI,GACrBH,KAEEA,GAAc,GAChBE,EAASpE,UAKf,IAAMiF,EAAmCxE,OAAOyE,OAAOjB,GAEvD,OADAgB,EAAW/C,gBAAkB+B,EACtBgB,EH9CwBE,CAC7B9B,EACA1G,EACA9F,EACA4J,OAAO2E,QAAQ5D,KIsO2B,SAAC6B,GAC7C,IAAIgC,GAAyB,EAwB7B,GAvBAzF,EAASyD,EAAK,CACZc,kBAAmB,SAACmB,SAClB,GAAiC,uBAA7BA,EAAO9J,KAAK6E,OAAOhE,MAMvB,GAJAgJ,GAAyB,SACCE,EAAGD,EAAO9J,KAAKgK,mBAAZD,EAAwBrN,MACnD,SAACsD,GAAI,MAAyB,SAApBA,EAAKiK,MAAMtM,QAGrBmM,EAAOtF,WADT,CAKA,IAAM0F,EAAiBJ,EAAO9J,KAAKgK,WAAWG,KAAI,SAACC,GAAE,OAAKA,EAAGH,MAAMtM,QACnEuM,EAAejJ,KAAK,QACpB,IAAMoJ,EAAYC,EAASzC,eACdqC,EAAehB,KAAK,oCAEjCY,EAAOxJ,YAAY+J,GACnBP,EAAOtF,YAIPqF,EAAJ,CAEA,IAAMQ,EAAYC,EAASzC,iDAC3BA,EAAI0C,QAAQC,KAAKzJ,QAAQsJ,IJhQzBI,CAA+B5C,GI9DK,SACpCA,EACAjI,GAEA,QAA4B+G,EAA5BC,EAAAlG,EAAkBd,KAAU+G,EAAAC,KAAAjG,MAAE,CAAA,IAAnBC,EAAG+F,EAAA9F,MACZ,IACE,IAAM9E,EAAQ6E,EAAI7E,MAAM2L,MAAM/L,OAAUuN,KAAK,KACvCwB,EAASJ,EAASzC,cAAcjH,EAAII,kBAAiBjF,QAC3D8L,EAAI0C,QAAQC,KAAKzJ,QAAQ2J,GAEzB,MAAO1M,GACPsK,yBAAsC1H,EAAII,kBAAiBhD,KJoD/D2M,CAAuB9C,EAAKU,GAC5B1E,EACEsE,EAAkBzG,IAAI,eACtB6G,EACApH,GAGF,IAAMyJ,EE7EgB,SAAC/C,GACvB,OAAOgD,EAAShD,GAAKxK,KF4EEyN,CAASjD,GAC1BkD,EAAc3N,EAAUwN,GAI9B,OAHAlG,EAAeqB,IAAIgF,EAAaH,GAChClG,EAAeqB,IAAIK,EAAgBwE,GAE5BA,EKpDII,CACLnG,EACAC,EACA3D,EACA3E,EACAwJ,GAEF,MAAOhI,GAEP,OADAC,QAAQC,IAAIF,GACL6G,GAIX,OAAOA,EA3CLyD,mBAEE"}