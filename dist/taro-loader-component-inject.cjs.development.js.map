{"version":3,"file":"taro-loader-component-inject.cjs.development.js","sources":["../src/utils/consts.ts","../src/utils/index.ts","../src/utils/ast-helper.ts","../src/commons/components-handler.ts","../src/commons/ast-inject-handler.ts","../src/inject.ts","../src/index.ts"],"sourcesContent":["import { InjectComponentOptions, InjectOptions, TARO_ENV } from \"../types\";\r\nimport * as path from \"path\";\r\n\r\nexport const LOADER_NAME = \"taro-loader-component-inject\";\r\n\r\nexport const DEFAULT_INJECT_OPTIONS: InjectOptions = {\r\n  enable: false,\r\n  includePages: [],\r\n  excludePages: [],\r\n  componentsPath: path.resolve(process.cwd(), \"src/_inject\"),\r\n};\r\n\r\nexport const DEFAULT_COMPONENT_CONFIG: InjectComponentOptions = {\r\n  entry: \"index.tsx\",\r\n  injectPosition: \"bottom\",\r\n  includePages: [],\r\n  excludePages: [],\r\n  enable: true,\r\n};\r\n\r\n/** Taro 环境变量 */\r\nexport const ENV = (process.env.TARO_ENV as TARO_ENV) || \"\";\r\n\r\nexport const UNINJECT_TAGS = {\r\n  webView: true,\r\n};\r\n","import { minimatch } from \"minimatch\";\r\nimport * as crypto from \"crypto\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { ENV } from \"./consts\";\r\n\r\nexport function validateTypes(param: any, type: string) {\r\n  const toString = Object.prototype.toString;\r\n  return toString.call(param).slice(8, -1) === type;\r\n}\r\n\r\n/**\r\n * 从一组页面路径定义数组中判断有没有命中指定的文件路径,\r\n * 默认为 false\r\n * @param {string[]} pages 页面相对路径 or Glob规则字串数组\r\n * @param {string} pagePath 页面 router 相对路径\r\n * @return {boolean}\r\n */\r\nexport const verdictExclude = (\r\n  pages: string[] | undefined,\r\n  pagePath: string\r\n) => {\r\n  if (!pages || !pages.length) return false;\r\n  return !!pages.find((page) => minimatch(pagePath, page));\r\n};\r\n\r\n/**\r\n * 从一组页面路径定义数组中判断有没有命中指定的文件路径,\r\n * 默认为 true\r\n * @param {string[]} pages 页面相对路径 or Glob规则字串数组\r\n * @param {string} pagePath 页面 router 相对路径\r\n * @return {boolean}\r\n */\r\nexport const verdictInclude = (\r\n  pages: string[] | undefined,\r\n  pagePath: string\r\n) => {\r\n  if (!pages || !pages.length) return true;\r\n  return !!pages.find((page) => minimatch(pagePath, page));\r\n};\r\n\r\n/**\r\n * 过滤校验逻辑\r\n * @param {*} config\r\n * @param {*} pagePath\r\n * @returns {boolean}\r\n */\r\nexport const verdictPass = (config, pagePath) => {\r\n  let { excludePages = [], includePages = [], injectEnv } = config;\r\n\r\n  if (typeof injectEnv === \"string\") {\r\n    injectEnv = [injectEnv];\r\n  }\r\n\r\n  // 运行环境过滤\r\n  if (injectEnv && injectEnv.length) {\r\n    if (!injectEnv.includes(ENV)) {\r\n      return true;\r\n    }\r\n  }\r\n  // 页面过滤\r\n  if (verdictExclude(excludePages, pagePath)) return true;\r\n  if (!verdictInclude(includePages, pagePath)) return true;\r\n  return false;\r\n};\r\n\r\n/** 唯一值 */\r\nexport const crytoCode = (code) => {\r\n  const hash = crypto.createHash(\"md5\");\r\n  hash.update(code, \"utf8\");\r\n  return hash.digest(\"hex\");\r\n};\r\n\r\n/**\r\n * 生成唯一键字符串\r\n * @param len 生成唯一键的长度\r\n * @returns {string}\r\n */\r\nexport const randomString = (len?: number) => {\r\n  const length: number = len || 32;\r\n  const $chars = \"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\";\r\n  const maxPos = $chars.length;\r\n  let pwd = \"\";\r\n  for (let i = 0; i < length; i++) {\r\n    pwd += $chars.charAt(Math.floor(Math.random() * maxPos));\r\n  }\r\n  return pwd + `${new Date().getTime()}`;\r\n};\r\n\r\n/**\r\n * 去掉变量中的所有非法符号,并将命名转换成大驼峰格式,\r\n * 用于引入组件名和插入组件标签的生成, 默认为 InjectGlobalComp(XXXX)\r\n * @param {*} name\r\n * @return {*} string\r\n */\r\nexport const toUpperCamelCase = (name) => {\r\n  try {\r\n    return (\r\n      name\r\n        // 转换成小驼峰\r\n        .replace(/[_-](\\w)/g, (_, $1) => $1.toUpperCase())\r\n        // 转换首字母\r\n        .replace(/^.*?(\\w)/, (_, $1) => $1.toUpperCase())\r\n        // 去掉所有不合法的符号\r\n        .replace(/[^a-zA-Z]/g, \"\")\r\n    );\r\n  } catch (error) {\r\n    console.log(`转换 ${name} 默认组件名称失败: ${error}`);\r\n    return `InjectGlobalComp${randomString(4)}`;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取文件所在目录\r\n * @description path.sep: 提供特定于平台的路径片段分隔符\r\n * @param {*} stringPath window下路径通常为\\\\ ，别的系统为/\r\n * @return {*}\r\n */\r\nexport const getDirPathFromFilePath = (stringPath) => {\r\n  const parts = stringPath.split(path.sep);\r\n  parts.pop();\r\n  return parts.join(path.sep);\r\n};\r\n\r\n/**\r\n * 文件路径转绝对路径\r\n * @param {*} importPath 文件引入中采用的路径\r\n * @param {*} filePath 文件的路径\r\n * @param {*} aliasMaping webpack配置的alias; [\r\n    '@tarojs/components$',\r\n    '@tarojs/plugin-platform-tt/dist/components-react'\r\n  ][]\r\n * @returns\r\n */\r\nexport const toAbsolutePath = (\r\n  importPath: string,\r\n  filePath: string,\r\n  aliasMaping: [string, string][]\r\n) => {\r\n  let absolutePath = importPath;\r\n\r\n  if (path.isAbsolute(importPath)) {\r\n    absolutePath = importPath;\r\n  } else if (/^\\.{1,2}\\//.test(importPath)) {\r\n    // 相对路径转绝对路径\r\n    absolutePath = path.resolve(getDirPathFromFilePath(filePath), importPath);\r\n  } else {\r\n    for (const [aKey, aPath] of aliasMaping) {\r\n      if (!importPath.startsWith(aKey)) continue;\r\n      absolutePath = importPath.replace(aKey, aPath);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // 格式化路径\r\n  absolutePath = path.normalize(absolutePath);\r\n  const parsePath = path.parse(absolutePath);\r\n\r\n  if (parsePath.ext) return absolutePath;\r\n  // 添加后缀， 优先采用tsx的文件 次采用.jsx\r\n  if (fs.existsSync(`${absolutePath}.${ENV}.tsx`))\r\n    return absolutePath + `.${ENV}.tsx`;\r\n  if (fs.existsSync(absolutePath + \".tsx\")) return absolutePath + \".tsx\";\r\n  if (fs.existsSync(`${absolutePath}${path.sep}index.${ENV}.tsx`))\r\n    return `${absolutePath}${path.sep}index.${ENV}.tsx`;\r\n  if (fs.existsSync(absolutePath + path.sep + \"index.tsx\"))\r\n    return absolutePath + path.sep + \"index.tsx\";\r\n\r\n  if (fs.existsSync(absolutePath + `.${ENV}.jsx`))\r\n    return absolutePath + `.${ENV}.jsx`;\r\n  if (fs.existsSync(absolutePath + \".jsx\")) return absolutePath + \".jsx\";\r\n  if (fs.existsSync(`${absolutePath}${path.sep}index.${ENV}.jsx`))\r\n    return `${absolutePath}${path.sep}index.${ENV}.jsx`;\r\n  if (fs.existsSync(absolutePath + path.sep + \"index.jsx\"))\r\n    return absolutePath + path.sep + \"index.jsx\";\r\n\r\n  return absolutePath;\r\n};\r\n","// AST 辅助函数集\r\nimport generate from \"@babel/generator\";\r\nimport parser from \"@babel/parser\";\r\nimport traverse from \"@babel/traverse\";\r\nimport { NodePath } from \"@babel/traverse\";\r\nimport t from \"@babel/types\";\r\nimport { AstCodes } from \"../types\";\r\n\r\nexport const code2ast = (source: string): AstCodes => {\r\n  return parser.parse(source, {\r\n    sourceType: \"module\",\r\n    ranges: true,\r\n    plugins: [\"jsx\", \"typescript\", \"classProperties\"],\r\n  });\r\n};\r\n\r\nexport const ast2code = (ast: AstCodes): string => {\r\n  return generate(ast).code;\r\n};\r\n\r\n/**\r\n * 创建 jSXElement nodePath\r\n * https://babeljs.io/docs/babel-types#jsxelement\r\n * @param {*} name\r\n * @return {*}\r\n */\r\nexport const createJSXElement = (name) => {\r\n  return t.jSXElement(\r\n    t.jSXOpeningElement(t.jsxIdentifier(\"\" + name), [], true),\r\n    null,\r\n    [],\r\n    true\r\n  );\r\n};\r\n\r\n/**\r\n * 创建 React.createElement nodePath\r\n * https://babeljs.io/docs/babel-types#identifier\r\n * @param {*} name\r\n * @return {*}\r\n */\r\nexport const createReactCallExpression = (name) => {\r\n  // 创建React、createElement两个函数node\r\n  const reactIdentifier = t.identifier(\"React\");\r\n  const createElementIdentifier = t.identifier(\"createElement\");\r\n  // 为React函数prototype增加createElement\r\n  const callee = t.memberExpression(reactIdentifier, createElementIdentifier);\r\n  // 将我们要创建的组件当参传入成return <name />函数\r\n  return t.callExpression(callee, [t.identifier(name)]);\r\n};\r\n\r\ntype ExportNode = NodePath<t.ExportDefaultDeclaration> | undefined;\r\n/**\r\n * 获取默认导出块\r\n * @description 默认页面组件到处时应采用 export default XX 的形式导出\r\n * @param {*} ast\r\n */\r\nexport const getDefaultExportNode = (ast: AstCodes): ExportNode => {\r\n  let _node: ExportNode;\r\n  traverse(ast, {\r\n    ExportDefaultDeclaration(node) {\r\n      _node = node;\r\n      node.stop();\r\n    },\r\n  });\r\n  return _node;\r\n};\r\n/**\r\n * 为组件包裹一个View标签: <Content /> => <View><Content /></View>\r\n * @param {*} node\r\n * @returns {*} 此时返回的根节点为<View></View>\r\n */\r\nexport const wrapJSXClosingElement = (pathNode) => {\r\n  const fragments = t.jsxElement(\r\n    t.jsxOpeningElement(t.jsxIdentifier(\"View\"), []),\r\n    t.jsxClosingElement(t.jsxIdentifier(\"View\")),\r\n    [pathNode.node]\r\n  );\r\n  pathNode.replaceWith(fragments);\r\n};\r\n\r\n/**\r\n * 获取页面节点相关的详细绑定信息（通过绑定的路径获取-binding.path）\r\n * 用于获取指定变量名所对应的内容实例，如传入 name1 索引获取 const name1 = () => {} path实例\r\n * @param {*} node\r\n * @param {*} name 变量名\r\n * @returns {*}\r\n */\r\nexport const getBindingNode = (pathNode, name) => {\r\n  try {\r\n    const _path = pathNode.scope.bindings[name].path;\r\n    return _path;\r\n  } catch (error) {\r\n    return void 0;\r\n  }\r\n};\r\n\r\n/**\r\n * 遍历生成AST对象|数组\r\n * @param {*} obj\r\n * @returns\r\n */\r\nexport const generateAST = (obj) => {\r\n  if (Array.isArray(obj)) {\r\n    // 如果是数组类型，则递归处理每个元素\r\n    const elements = obj.map(generateAST);\r\n    return t.arrayExpression(elements);\r\n  } else if (typeof obj === \"object\" && obj !== null) {\r\n    // 如果是对象类型，则递归处理每个属性\r\n    const properties = Object.entries(obj).map(([key, value]) => {\r\n      const keyNode = t.isValidIdentifier(key)\r\n        ? t.identifier(key)\r\n        : t.stringLiteral(key);\r\n      const valueNode = generateAST(value);\r\n      return t.objectProperty(keyNode, valueNode);\r\n    });\r\n    return t.objectExpression(properties);\r\n  } else if (typeof obj === \"string\") {\r\n    // 如果是字符串类型，则创建字符串字面量节点\r\n    return t.stringLiteral(obj);\r\n  } else if (typeof obj === \"number\") {\r\n    // 如果是数字类型，则创建数字字面量节点\r\n    return t.numericLiteral(obj);\r\n  } else if (typeof obj === \"boolean\") {\r\n    // 如果是布尔类型，则创建布尔字面量节点\r\n    return t.booleanLiteral(obj);\r\n  } else if (obj === null) {\r\n    // 如果是 null，则创建 null 字面量节点\r\n    return t.nullLiteral();\r\n  } else if (obj === undefined) {\r\n    // 如果是 undefined，则创建 undefined 字面量节点\r\n    return t.identifier(\"undefined\");\r\n  } else {\r\n    throw new Error(`Unsupported object type: ${typeof obj}`);\r\n  }\r\n};\r\n\r\n/**\r\n * 遍历合成两个AST Object对象\r\n * @param {*} obj1\r\n * @param {*} obj2\r\n * @returns\r\n */\r\nexport const mergeASTObjects = (obj1, obj2) => {\r\n  if (obj1.type === \"ObjectExpression\" && obj2.type === \"ObjectExpression\") {\r\n    const mergedProperties = new Map();\r\n\r\n    // 将 obj1 的属性添加到 mergedProperties\r\n    for (const prop of obj1.properties) {\r\n      if (prop.type === \"ObjectProperty\") {\r\n        mergedProperties.set(prop.key.name, prop);\r\n      }\r\n    }\r\n    // 将 obj2 的属性合并或添加到 mergedProperties\r\n    for (const prop of obj2.properties) {\r\n      if (prop.type === \"ObjectProperty\") {\r\n        const propName = prop.key.name;\r\n        if (mergedProperties.has(propName)) {\r\n          // 如果属性已存在，则合并值\r\n          const existingProp = mergedProperties.get(propName);\r\n          existingProp.value = mergeASTObjects(existingProp.value, prop.value);\r\n        } else {\r\n          // 否则添加属性\r\n          mergedProperties.set(propName, prop);\r\n        }\r\n      }\r\n    }\r\n    // 将 mergedProperties 转换为属性数组\r\n    const mergedPropsArray = Array.from(mergedProperties.values());\r\n\r\n    // 返回合并后的对象\r\n    return t.objectExpression(mergedPropsArray);\r\n  } else {\r\n    // 如果不是对象类型，则返回 obj2\r\n    return obj2;\r\n  }\r\n};\r\n","/** 公共注入组件操作函数集 */\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport traverse from \"@babel/traverse\";\r\nimport { toAbsolutePath, toUpperCamelCase, verdictPass } from \"../utils\";\r\nimport { DEFAULT_COMPONENT_CONFIG, ENV } from \"../utils/consts\";\r\nimport { ComponentOptionArray, AstCodes } from \"../types\";\r\n\r\nconst customFileAlias = (\r\n  process.env.INJECT_COMPONENT_ALIAS || \"\"\r\n).toLocaleLowerCase();\r\n\r\ntype ParsedPath = Omit<path.ParsedPath, \"base\"> & {\r\n  base?: string;\r\n};\r\n\r\nexport const getGlobalComponents = (\r\n  componentFilePath: string,\r\n  pagePath: string\r\n) => {\r\n  if (!fs.existsSync(componentFilePath)) return [];\r\n\r\n  const compsDir = fs.readdirSync(componentFilePath);\r\n  const retConfig: ComponentOptionArray = [];\r\n  // 全局组件路径-配置枚举\r\n  retConfig.__import_path__ = {};\r\n\r\n  for (const compDirName of compsDir) {\r\n    const compDir = path.join(componentFilePath, compDirName);\r\n    const stat = fs.statSync(compDir);\r\n    if (!stat.isDirectory()) continue;\r\n\r\n    const configPath = path.join(compDir, \"config.json\");\r\n    let configCustomPath = path.join(compDir, `config.${customFileAlias}.json`);\r\n    const comConfig = { ...DEFAULT_COMPONENT_CONFIG };\r\n\r\n    // 获取组件级别配置信息 - 优先获取config.{自定义私有化参}.json的数据\r\n    try {\r\n      if (!fs.existsSync(configCustomPath)) {\r\n        if (!fs.existsSync(configPath)) {\r\n          throw new Error(\"组件配置不存在\");\r\n        }\r\n        configCustomPath = configPath;\r\n      }\r\n\r\n      const config = JSON.parse(\r\n        fs.readFileSync(configCustomPath, { encoding: \"utf-8\" })\r\n      );\r\n      Object.assign(comConfig, config);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    // 组件/文件名转驼峰并增加注入前缀，避免出现重名的问题\r\n    comConfig.tagName = toUpperCamelCase(comConfig.tagName || compDirName);\r\n    comConfig.tagName = `Inject_${comConfig.tagName}`;\r\n\r\n    // 入口路径绝对化\r\n    comConfig.entry = path.normalize(path.join(compDir, comConfig.entry));\r\n    let entryParse: ParsedPath = path.parse(comConfig.entry);\r\n    const afterExt = entryParse.name.split(\".\")[1];\r\n    let hasEnvPage = false;\r\n\r\n    if (!afterExt && ENV) {\r\n      entryParse.name = entryParse.name + \".\" + ENV;\r\n      delete entryParse[\"base\"];\r\n      const envEntry = path.format(entryParse);\r\n\r\n      if (fs.existsSync(envEntry)) {\r\n        comConfig.entry = envEntry;\r\n        hasEnvPage = true;\r\n      }\r\n    }\r\n    if (!hasEnvPage && !fs.existsSync(comConfig.entry)) continue;\r\n\r\n    /**\r\n     * 单组件级别页面过滤\r\n     */\r\n    if (verdictPass(comConfig, pagePath) || !comConfig.enable) continue;\r\n\r\n    retConfig.push({\r\n      ...comConfig,\r\n    });\r\n\r\n    retConfig.__import_path__[comConfig.entry] = comConfig;\r\n  }\r\n\r\n  return retConfig;\r\n};\r\n\r\n/**\r\n * 过滤已经被引入的全局组件\r\n * @param {*} comConfigs\r\n * @param {*} ast\r\n * @param {*} alias\r\n */\r\nexport const filterInjectedComponents = (\r\n  ast: AstCodes,\r\n  filePath: string,\r\n  comConfigs: ComponentOptionArray,\r\n  aliasMaping: [string, string][]\r\n): ComponentOptionArray => {\r\n  const importPathMap = Object.assign({}, comConfigs.__import_path__);\r\n  let remainComp = comConfigs.length;\r\n\r\n  traverse(ast, {\r\n    // 将import的路径替换成绝对路径后与组件的绝对路径进行比对，查看是否为同一引入\r\n    ImportDeclaration(fileNode) {\r\n      const absolutePath = toAbsolutePath(\r\n        fileNode.node.source.value,\r\n        filePath,\r\n        aliasMaping\r\n      );\r\n      if (importPathMap[absolutePath]) {\r\n        delete importPathMap[absolutePath];\r\n        remainComp--;\r\n      }\r\n      if (remainComp <= 0) {\r\n        fileNode.stop();\r\n      }\r\n    },\r\n  });\r\n\r\n  const newConfigs: ComponentOptionArray = Object.values(importPathMap);\r\n  newConfigs.__import_path__ = importPathMap;\r\n  return newConfigs;\r\n};\r\n","// @ts-nocheck\r\n/**\r\n * AST实现注入流程集\r\n */\r\nimport * as path from \"path\";\r\nimport traverse, { NodePath } from \"@babel/traverse\";\r\nimport template from \"@babel/template\";\r\nimport t from \"@babel/types\";\r\nimport { processTypeEnum, printLog } from \"@tarojs/helper\";\r\nimport {\r\n  wrapJSXClosingElement,\r\n  createJSXElement,\r\n  createReactCallExpression,\r\n  getBindingNode,\r\n} from \"../utils/ast-helper\";\r\nimport { UNINJECT_TAGS } from \"../utils/consts\";\r\nimport { AstCodes, ComponentOptionArray } from \"src/types\";\r\n\r\n/**\r\n * 将全局组件以 import xx from \"xx\" 的形式注入页面\r\n * @param {AstCodes} ast\r\n * @param {ComponentOptionArray} comConfigs\r\n */\r\nexport const injectImportComponents = (\r\n  ast: AstCodes,\r\n  comConfigs: ComponentOptionArray\r\n) => {\r\n  for (const com of comConfigs) {\r\n    try {\r\n      const entry = com.entry.split(path.sep).join(\"/\");\r\n      const astCom = template.ast(`import ${com.tagName} from '${entry}';`);\r\n      ast.program.body.unshift(astCom);\r\n      // printLog(processTypeEnum.CREATE, `注入 ${com.tagName} 组件成功`);\r\n    } catch (error) {\r\n      printLog(processTypeEnum.ERROR, `注入 ${com.tagName} 组件失败: ${error}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 注入JSX元素\r\n * @param {*} pathNode argument为 JSXElement 类型的 ReturnStatement 实例\r\n * @param {*} comConfigs\r\n * @returns\r\n */\r\nconst injectJSXElement = (pathNode, comConfigs) => {\r\n  if (!t.isJSXElement(pathNode) && !t.isJSXFragment(pathNode)) return;\r\n  if (UNINJECT_TAGS[pathNode.node?.openingElement?.name?.name || \"\"]) return;\r\n\r\n  wrapJSXClosingElement(pathNode);\r\n\r\n  for (const com of comConfigs) {\r\n    if (com.injectPosition === \"top\") {\r\n      pathNode.node.children.unshift(createJSXElement(com.tagName));\r\n    } else {\r\n      pathNode.node.children.push(createJSXElement(com.tagName));\r\n    }\r\n  }\r\n};\r\n\r\nconst injectCallExpression = (pathNode, comConfigs, filePath) => {\r\n  // CreateElement只有最后的...children接收额外传入ReactNode，故默认只采用push形式\r\n  if (pathNode.node?.callee?.property?.name === \"createElement\") {\r\n    const _arguments = pathNode.node.arguments;\r\n    for (const com of comConfigs) {\r\n      _arguments.push(createReactCallExpression(com.tagName));\r\n    }\r\n    return;\r\n  }\r\n  const pathBody = pathNode.get(\"callee\").get(\"body\");\r\n  if (pathBody.isBlockStatement()) {\r\n    handleReturnStatement(pathBody, comConfigs, filePath);\r\n  } else {\r\n    injectJSXElement(pathBody, comConfigs);\r\n  }\r\n};\r\n\r\nconst handleInjectArgumentFromType = (\r\n  argumentPaths,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string,\r\n  done?: () => void\r\n) => {\r\n  if (!argumentPaths) {\r\n    return;\r\n  }\r\n  // return <xxx></xxx> 已认证\r\n  if (t.isJSXElement(argumentPaths) || t.isJSXFragment(argumentPaths)) {\r\n    injectJSXElement(argumentPaths, comConfigs);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return a > 0 ? <XX/> : null; 已认证\r\n  if (t.isConditionalExpression(argumentPaths)) {\r\n    const consequent = argumentPaths.get(\"consequent\");\r\n    const alternate = argumentPaths.get(\"alternate\");\r\n    handleInjectArgumentFromType(consequent, comConfigs, filePath, done);\r\n    handleInjectArgumentFromType(alternate, comConfigs, filePath, done);\r\n    return;\r\n  }\r\n\r\n  // return React?.createElement -- 不接受 createElement, 兼容特殊函数场景\r\n  if (t.isCallExpression(argumentPaths)) {\r\n    injectCallExpression(argumentPaths, comConfigs, filePath);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return { ComponentXX }\r\n  if (t.isObjectExpression(argumentPaths)) {\r\n    injectJSXElement(argumentPaths, comConfigs);\r\n    done && done();\r\n    return;\r\n  }\r\n\r\n  // return aa && ComponentXX || ComponentYY\r\n  if (t.isLogicalExpression(argumentPaths)) {\r\n    const left = argumentPaths.get(\"left\");\r\n    const right = argumentPaths.get(\"right\");\r\n    handleInjectArgumentFromType(left, comConfigs, filePath, done);\r\n    handleInjectArgumentFromType(right, comConfigs, filePath, done);\r\n    return;\r\n  }\r\n\r\n  if (t.isTSAsExpression(argumentPaths)) {\r\n    handleTSAsExpression(argumentPaths, comConfigs, filePath);\r\n    return;\r\n  }\r\n\r\n  if (t.isIdentifier(argumentPaths)) {\r\n    handleIdentifier(argumentPaths, comConfigs, filePath);\r\n    return;\r\n  }\r\n\r\n  if (t.isVariableDeclarator(argumentPaths)) {\r\n    handleVariableDeclarator(argumentPaths, comConfigs, filePath);\r\n  }\r\n};\r\n\r\n/**\r\n * 处理返回体代码中的 return 逻辑\r\n * @param {*} pathNode  XXFunction.body\r\n * @param {*} comConfigs\r\n * @returns {*}\r\n */\r\nconst handleReturnStatement = (\r\n  pathNode: NodePath<any>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  try {\r\n    let canInject = false;\r\n    const u = pathNode.get(\"body\") as NodePath<t.BlockStatement>;\r\n    const bodyList = u.get(\"body\");\r\n    bodyList.forEach((_node) => {\r\n      if (t.isReturnStatement(_node) && !canInject) {\r\n        // 注入 -- 只针对函数最外层的 return 做处理\r\n        canInject = true;\r\n\r\n        _node.node.__GLOBAL__COMPONENT__ = \"__GLOBAL__COMPONENT__\";\r\n        const argumentPaths = _node.get(\"argument\");\r\n        handleInjectArgumentFromType(\r\n          argumentPaths,\r\n          comConfigs,\r\n          filePath,\r\n          () => {\r\n            _node.skip();\r\n          }\r\n        );\r\n      }\r\n      // @ts-ignore\r\n      if (t.isIfStatement(_node)) {\r\n        handleReturnStatement(_node, comConfigs, filePath);\r\n        return;\r\n      }\r\n    });\r\n  } catch (error) {}\r\n};\r\n\r\n/**\r\n * 处理ts断言类型 (xx) as any => (<>xx<myComponent/></>) as any\r\n * @returns\r\n */\r\nconst handleTSAsExpression = (pathNode, comConfigs, filePath) => {\r\n  if (pathNode.node?.expression?.name) {\r\n    return injectComponentTag(\r\n      getBindingNode(pathNode, pathNode.node.expression.name),\r\n      comConfigs,\r\n      filePath\r\n    );\r\n  }\r\n  return handleInjectArgumentFromType(\r\n    pathNode.get(\"expression\"),\r\n    comConfigs,\r\n    filePath\r\n  );\r\n};\r\n\r\n/**\r\n * 处理 Class 类型中的render返回体， 默认 render() { return } 形式\r\n */\r\nconst handleClass = (pathNode, compConfigs, filePath) => {\r\n  traverse(\r\n    pathNode.node,\r\n    {\r\n      ClassMethod(_node) {\r\n        if (_node.node.key?.name !== \"render\") return;\r\n        handleReturnStatement(_node, compConfigs, filePath);\r\n        _node.stop();\r\n      },\r\n    },\r\n    pathNode.scope,\r\n    pathNode\r\n  );\r\n};\r\n\r\nconst handleIdentifier = (\r\n  pathNode: NodePath<t.Identifier>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  // 获取 export default XX 中的 XX\r\n  const exportComName = pathNode.node.name;\r\n  return injectComponentTag(\r\n    getBindingNode(pathNode, exportComName),\r\n    comConfigs,\r\n    filePath\r\n  );\r\n};\r\n\r\n/**\r\n * 处理 export default 为箭头函数时的 return；\r\n */\r\nconst handleArrowFunctionExpression = (\r\n  functionNode: NodePath<t.ArrowFunctionExpression>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  const functionBody = functionNode.get(\"body\");\r\n  // () => xx  OR () => { return xx } OR () => React.CreateElement\r\n  if (t.isBlockStatement(functionBody.node)) {\r\n    handleReturnStatement(functionNode, comConfigs, filePath);\r\n    return;\r\n  }\r\n  if (t.isCallExpression(functionBody.node)) {\r\n    injectComponentTag(functionNode, comConfigs, filePath);\r\n    return;\r\n  }\r\n  injectJSXElement(functionBody, comConfigs);\r\n};\r\n\r\n/**\r\n * 处理字面量类型\r\n * 作为页面组件，其VariableDeclarator对应类型下的init值应为ArrowFunctionExpression类型\r\n */\r\nconst handleVariableDeclarator = (\r\n  pathNode: NodePath<t.VariableDeclarator>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  const valuePathNode = pathNode.get(\"init\");\r\n  return injectComponentTag(valuePathNode, comConfigs, filePath);\r\n};\r\n\r\n/**\r\n * 将代码块注入文件 --- function|class|字面量时处理，其余递归至符合要求\r\n * @description 我们将遍历该页面直至最后获取导出的 ArrowFunctionExpression | FunctionDeclaration | FunctionExpression | ClassDeclaration | ClassExpression 类型做插入\r\n * @param {*} pathNode 导出 AST Path 实例对象,在babel中为 NodePath 对象，包含了具体信息\r\n * @param {*} comConfigs\r\n */\r\nexport const injectComponentTag = (\r\n  pathNode: NodePath<any>,\r\n  comConfigs: ComponentOptionArray,\r\n  filePath: string\r\n) => {\r\n  if (!pathNode || !pathNode.node) return;\r\n  switch (pathNode.node.type) {\r\n    case \"Identifier\": // 处理字面量|变量\r\n      handleIdentifier(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"VariableDeclarator\": // 处理字面量函数\r\n      handleVariableDeclarator(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"ArrowFunctionExpression\": // 处理箭头函数\r\n      handleArrowFunctionExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"FunctionDeclaration\": // 处理函数 function xx() { return }\r\n    case \"FunctionExpression\": // 处理匿名函数 const xx = function() { return }\r\n      handleReturnStatement(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"TSAsExpression\": // 处理Ts断言 const i = Component as string;\r\n      handleTSAsExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"ClassDeclaration\":\r\n    case \"ClassExpression\":\r\n      handleClass(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"CallExpression\":\r\n      injectCallExpression(pathNode, comConfigs, filePath);\r\n      break;\r\n    case \"JSXElement\": // 特殊情况 - () => {const I = <></>; return I } 时触发\r\n      injectJSXElement(pathNode, comConfigs);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n/**\r\n * 插入一个 import { View } from '@tarojs/components' 语句\r\n * @param {AstCodes} ast\r\n */\r\nexport const injectImportTaroBlockComponent = (ast: AstCodes) => {\r\n  let taroComponentsImported = false;\r\n  traverse(ast, {\r\n    ImportDeclaration: (__path) => {\r\n      if (__path.node.source.value !== \"@tarojs/components\") return;\r\n\r\n      taroComponentsImported = true;\r\n      let blockComponentImported = __path.node.specifiers?.find(\r\n        (node) => node.local.name === \"View\"\r\n      );\r\n      if (blockComponentImported) {\r\n        __path.stop();\r\n        return;\r\n      }\r\n\r\n      const specifierNames = __path.node.specifiers.map((sp) => sp.local.name);\r\n      specifierNames.push(\"View\");\r\n      const importAst = template.ast(\r\n        `import {${specifierNames.join(\",\")}} from '@tarojs/components'`\r\n      );\r\n      __path.replaceWith(importAst);\r\n      __path.stop();\r\n    },\r\n  });\r\n\r\n  if (taroComponentsImported) return;\r\n\r\n  const importAst = template.ast(`import { View } from '@tarojs/components'`);\r\n  ast.program.body.unshift(importAst);\r\n};\r\n","import { printLog, processTypeEnum } from \"@tarojs/helper\";\r\nimport { ComponentOptionArray, InjectOptions } from \"./types\";\r\nimport { crytoCode, verdictExclude, verdictInclude } from \"./utils\";\r\nimport { code2ast, ast2code, getDefaultExportNode } from \"./utils/ast-helper\";\r\nimport {\r\n  filterInjectedComponents,\r\n  getGlobalComponents,\r\n} from \"./commons/components-handler\";\r\nimport {\r\n  injectImportTaroBlockComponent,\r\n  injectImportComponents,\r\n  injectComponentTag,\r\n} from \"./commons/ast-inject-handler\";\r\n\r\n// 全局组件配置缓存 - 运行过程中理论上只需要获取一次全局配置\r\nlet globalComponentConfigs: ComponentOptionArray;\r\n\r\n// 页面缓存， 多次执行插件内容容易爆栈\r\nconst cachedPageCode = new Map();\r\n\r\n/**\r\n * 自动注入全局组件\r\n * @param {string} source 页面字符串源码\r\n * @param {object} options 用户传入全局配置项\r\n * @param {string} filePath 当前页面路径参数\r\n * @param {string} pagePath 小程序路由路径参数\r\n * @param {object} webpackAlias Webpack alias代理设置\r\n */\r\nfunction handleInjectComponents(\r\n  source: string,\r\n  options: InjectOptions,\r\n  filePath: string,\r\n  pagePath: string,\r\n  webpackAlias: Record<string, string>\r\n) {\r\n  if (!options.enable) {\r\n    return source;\r\n  }\r\n\r\n  // taro 低版本进行二次编译，跳出\r\n  if (\r\n    source.includes(\"/*#__PURE__*/\") ||\r\n    source.includes(\"react/jsx-runtime\")\r\n  ) {\r\n    return source;\r\n  }\r\n\r\n  const originFileHash = crytoCode(source);\r\n  if (cachedPageCode.get(originFileHash)) {\r\n    // console.log(\"导出缓存\");\r\n    return cachedPageCode.get(originFileHash);\r\n  }\r\n\r\n  // 全局级别过滤无需注入的页面\r\n  if (verdictExclude(options.excludePages, pagePath)) return source;\r\n\r\n  // 全局级别过滤保留注入的页面\r\n  if (!verdictInclude(options.includePages, pagePath)) return source;\r\n\r\n  // 注入全局组件配置信息\r\n  if (!globalComponentConfigs) {\r\n    const configs = getGlobalComponents(options.componentsPath || \"\", pagePath);\r\n    globalComponentConfigs = configs;\r\n  }\r\n\r\n  if (!globalComponentConfigs.length) return source;\r\n\r\n  const ast = code2ast(source);\r\n  const exportDefaultNode = getDefaultExportNode(ast);\r\n\r\n  if (!exportDefaultNode) {\r\n    printLog(\r\n      processTypeEnum.WARNING,\r\n      `找不到默认导出,页面组件应通过全局默认导出(export default XX)，该页( ${pagePath} )将跳过自动插入全局组件`,\r\n      filePath\r\n    );\r\n    return source;\r\n  }\r\n\r\n  const finallyInjectComponent = filterInjectedComponents(\r\n    ast,\r\n    filePath,\r\n    globalComponentConfigs,\r\n    Object.entries(webpackAlias)\r\n  );\r\n  injectImportTaroBlockComponent(ast);\r\n  injectImportComponents(ast, finallyInjectComponent);\r\n  injectComponentTag(\r\n    exportDefaultNode.get(\"declaration\"),\r\n    finallyInjectComponent,\r\n    filePath\r\n  );\r\n\r\n  const injectedSource = ast2code(ast);\r\n  const newFileHash = crytoCode(injectedSource);\r\n  cachedPageCode.set(newFileHash, injectedSource);\r\n  cachedPageCode.set(originFileHash, injectedSource);\r\n\r\n  return injectedSource;\r\n}\r\n\r\nexport default handleInjectComponents;\r\n","import { getOptions } from \"loader-utils\";\r\nimport handleInjectComponents from \"./inject\";\r\nimport { DEFAULT_INJECT_OPTIONS } from \"./utils/consts\";\r\nimport { printLog, processTypeEnum, META_TYPE } from \"@tarojs/helper\";\r\nimport { validateTypes } from \"./utils\";\r\n\r\n/**\r\n * Page Cache\r\n * Taro 旧版本会多次编译并丢失一些属性，需要提前将已有数据缓存\r\n * https://github.com/NervJS/taro/pull/14380\r\n */\r\nconst cachedPages = new Map<string, Record<string, string>>();\r\n\r\nexport default function(source) {\r\n  let options = getOptions(this);\r\n  if (options && !validateTypes(options, \"Object\")) {\r\n    printLog(\r\n      processTypeEnum.ERROR,\r\n      \"\\n❌ 全局注入插件加载失败 :: options 必须为 Object 类型\"\r\n    );\r\n    return;\r\n  }\r\n  // printLog(\r\n  //   processTypeEnum.ERROR,\r\n  //   \"\\n❌ 全局注入插件加载失败 :: options 必须为 Object 类型\"\r\n  // );\r\n  options = {\r\n    ...DEFAULT_INJECT_OPTIONS,\r\n    ...options,\r\n  };\r\n\r\n  const { resourcePath: filePath, _module = {} } = this;\r\n\r\n  const cachedModules = cachedPages.get(filePath) || {};\r\n  const miniType = _module.miniType || cachedModules.miniType;\r\n  const pagePath = _module.name || cachedModules.name;\r\n\r\n  if (!miniType) {\r\n    return source;\r\n  }\r\n\r\n  if ([META_TYPE.PAGE].includes(miniType)) {\r\n    cachedPages.set(filePath, { miniType, name: pagePath });\r\n    const webpackAlias = this._compiler.options?.resolve?.alias;\r\n\r\n    try {\r\n      return handleInjectComponents(\r\n        source,\r\n        options,\r\n        filePath,\r\n        pagePath,\r\n        webpackAlias\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n      return source;\r\n    }\r\n  }\r\n\r\n  return source;\r\n}\r\n"],"names":["DEFAULT_INJECT_OPTIONS","enable","includePages","excludePages","componentsPath","path","process","cwd","DEFAULT_COMPONENT_CONFIG","entry","injectPosition","ENV","env","TARO_ENV","UNINJECT_TAGS","webView","validateTypes","param","type","toString","Object","prototype","call","slice","verdictExclude","pages","pagePath","length","find","page","minimatch","verdictInclude","verdictPass","config","_config$excludePages","_config$includePages","injectEnv","includes","crytoCode","code","hash","crypto","update","digest","randomString","len","$chars","maxPos","pwd","i","charAt","Math","floor","random","Date","getTime","toUpperCamelCase","name","replace","_","$1","toUpperCase","error","console","log","getDirPathFromFilePath","stringPath","parts","split","pop","join","toAbsolutePath","importPath","filePath","aliasMaping","absolutePath","test","_iterator","_createForOfIteratorHelperLoose","_step","done","_step$value","value","aKey","aPath","startsWith","parsePath","ext","fs","code2ast","source","parser","parse","sourceType","ranges","plugins","ast2code","ast","generate","createJSXElement","t","jSXElement","jSXOpeningElement","jsxIdentifier","createReactCallExpression","reactIdentifier","identifier","createElementIdentifier","callee","memberExpression","callExpression","getDefaultExportNode","_node","traverse","ExportDefaultDeclaration","node","stop","wrapJSXClosingElement","pathNode","fragments","jsxElement","jsxOpeningElement","jsxClosingElement","replaceWith","getBindingNode","_path","scope","bindings","customFileAlias","INJECT_COMPONENT_ALIAS","toLocaleLowerCase","getGlobalComponents","componentFilePath","compsDir","retConfig","__import_path__","compDirName","compDir","stat","isDirectory","configPath","configCustomPath","comConfig","_extends","Error","JSON","encoding","assign","tagName","entryParse","afterExt","hasEnvPage","envEntry","push","filterInjectedComponents","comConfigs","importPathMap","remainComp","ImportDeclaration","fileNode","newConfigs","values","injectImportComponents","com","astCom","template","program","body","unshift","printLog","injectJSXElement","isJSXElement","isJSXFragment","_pathNode$node","openingElement","_iterator2","_step2","children","injectCallExpression","_pathNode$node2","property","_arguments","arguments","_iterator3","_step3","pathBody","get","isBlockStatement","handleReturnStatement","handleInjectArgumentFromType","argumentPaths","isConditionalExpression","consequent","alternate","isCallExpression","isObjectExpression","isLogicalExpression","left","right","isTSAsExpression","handleTSAsExpression","isIdentifier","handleIdentifier","isVariableDeclarator","handleVariableDeclarator","canInject","u","bodyList","forEach","isReturnStatement","__GLOBAL__COMPONENT__","skip","isIfStatement","_pathNode$node3","expression","injectComponentTag","handleClass","compConfigs","ClassMethod","_node$node$key","key","exportComName","handleArrowFunctionExpression","functionNode","functionBody","valuePathNode","injectImportTaroBlockComponent","taroComponentsImported","__path","blockComponentImported","_path$node$specifier","specifiers","local","specifierNames","map","sp","importAst","globalComponentConfigs","cachedPageCode","Map","handleInjectComponents","options","webpackAlias","originFileHash","configs","exportDefaultNode","finallyInjectComponent","entries","injectedSource","newFileHash","set","cachedPages","getOptions","resourcePath","_this$_module","_module","cachedModules","miniType","META_TYPE","PAGE","_this$_compiler$optio","_compiler","resolve","alias"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,sBAAsB,GAAkB;EACnDC,MAAM,EAAE,KAAK;EACbC,YAAY,EAAE,EAAE;EAChBC,YAAY,EAAE,EAAE;EAChBC,cAAc,eAAEC,YAAY,eAACC,OAAO,CAACC,GAAG,EAAE,EAAE,aAAa;CAC1D;AAEM,IAAMC,wBAAwB,GAA2B;EAC9DC,KAAK,EAAE,WAAW;EAClBC,cAAc,EAAE,QAAQ;EACxBR,YAAY,EAAE,EAAE;EAChBC,YAAY,EAAE,EAAE;EAChBF,MAAM,EAAE;CACT;AAED;AACO,IAAMU,GAAG,GAAIL,OAAO,CAACM,GAAG,CAACC,QAAqB,IAAI,EAAE;AAEpD,IAAMC,aAAa,GAAG;EAC3BC,OAAO,EAAE;CACV;;SCnBeC,aAAaA,CAACC,KAAU,EAAEC,IAAY;EACpD,IAAMC,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACF,QAAQ;EAC1C,OAAOA,QAAQ,CAACG,IAAI,CAACL,KAAK,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAKL,IAAI;AACnD;AAEA;;;;;;;AAOA,AAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAcA,CACzBC,KAA2B,EAC3BC,QAAgB;EAEhB,IAAI,CAACD,KAAK,IAAI,CAACA,KAAK,CAACE,MAAM,EAAE,OAAO,KAAK;EACzC,OAAO,CAAC,CAACF,KAAK,CAACG,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKC,mBAAS,CAACJ,QAAQ,EAAEG,IAAI,CAAC;IAAC;AAC1D,CAAC;AAED;;;;;;;AAOA,AAAO,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CACzBN,KAA2B,EAC3BC,QAAgB;EAEhB,IAAI,CAACD,KAAK,IAAI,CAACA,KAAK,CAACE,MAAM,EAAE,OAAO,IAAI;EACxC,OAAO,CAAC,CAACF,KAAK,CAACG,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKC,mBAAS,CAACJ,QAAQ,EAAEG,IAAI,CAAC;IAAC;AAC1D,CAAC;AAED;;;;;;AAMA,AAAO,IAAMG,WAAW,GAAG,SAAdA,WAAWA,CAAIC,MAAM,EAAEP,QAAQ;EAC1C,IAAAQ,oBAAA,GAA0DD,MAAM,CAA1D9B,YAAY;IAAZA,YAAY,GAAA+B,oBAAA,cAAG,EAAE,GAAAA,oBAAA;IAAAC,oBAAA,GAAmCF,MAAM,CAAvC/B,YAAY;IAAZA,YAAY,GAAAiC,oBAAA,cAAG,EAAE,GAAAA,oBAAA;IAAEC,SAAS,GAAKH,MAAM,CAApBG,SAAS;EAErD,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAG,CAACA,SAAS,CAAC;;;EAIzB,IAAIA,SAAS,IAAIA,SAAS,CAACT,MAAM,EAAE;IACjC,IAAI,CAACS,SAAS,CAACC,QAAQ,CAAC1B,GAAG,CAAC,EAAE;MAC5B,OAAO,IAAI;;;;EAIf,IAAIa,cAAc,CAACrB,YAAY,EAAEuB,QAAQ,CAAC,EAAE,OAAO,IAAI;EACvD,IAAI,CAACK,cAAc,CAAC7B,YAAY,EAAEwB,QAAQ,CAAC,EAAE,OAAO,IAAI;EACxD,OAAO,KAAK;AACd,CAAC;AAED;AACA,AAAO,IAAMY,SAAS,GAAG,SAAZA,SAASA,CAAIC,IAAI;EAC5B,IAAMC,IAAI,GAAGC,iBAAiB,CAAC,KAAK,CAAC;EACrCD,IAAI,CAACE,MAAM,CAACH,IAAI,EAAE,MAAM,CAAC;EACzB,OAAOC,IAAI,CAACG,MAAM,CAAC,KAAK,CAAC;AAC3B,CAAC;AAED;;;;;AAKA,AAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,GAAY;EACvC,IAAMlB,MAAM,GAAWkB,GAAG,IAAI,EAAE;EAChC,IAAMC,MAAM,GAAG,kDAAkD;EACjE,IAAMC,MAAM,GAAGD,MAAM,CAACnB,MAAM;EAC5B,IAAIqB,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,MAAM,EAAEsB,CAAC,EAAE,EAAE;IAC/BD,GAAG,IAAIF,MAAM,CAACI,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,MAAM,CAAC,CAAC;;EAE1D,OAAOC,GAAG,SAAM,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE,CAAE;AACxC,CAAC;AAED;;;;;;AAMA,AAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,IAAI;EACnC,IAAI;IACF,OACEA;;KAEGC,OAAO,CAAC,WAAW,EAAE,UAACC,CAAC,EAAEC,EAAE;MAAA,OAAKA,EAAE,CAACC,WAAW,EAAE;;;KAEhDH,OAAO,CAAC,UAAU,EAAE,UAACC,CAAC,EAAEC,EAAE;MAAA,OAAKA,EAAE,CAACC,WAAW,EAAE;;;KAE/CH,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;GAE/B,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,mBAAOP,IAAI,2DAAcK,KAAO,CAAC;IAC5C,4BAA0BlB,YAAY,CAAC,CAAC,CAAC;;AAE7C,CAAC;AAED;;;;;;AAMA,AAAO,IAAMqB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,UAAU;EAC/C,IAAMC,KAAK,GAAGD,UAAU,CAACE,KAAK,CAAC/D,QAAQ,CAAC;EACxC8D,KAAK,CAACE,GAAG,EAAE;EACX,OAAOF,KAAK,CAACG,IAAI,CAACjE,QAAQ,CAAC;AAC7B,CAAC;AAED;;;;;;;;;;AAUA,AAAO,IAAMkE,cAAc,GAAG,SAAjBA,cAAcA,CACzBC,UAAkB,EAClBC,QAAgB,EAChBC,WAA+B;EAE/B,IAAIC,YAAY,GAAGH,UAAU;EAE7B,IAAInE,eAAe,CAACmE,UAAU,CAAC,EAAE;IAC/BG,YAAY,GAAGH,UAAU;GAC1B,MAAM,IAAI,YAAY,CAACI,IAAI,CAACJ,UAAU,CAAC,EAAE;;IAExCG,YAAY,GAAGtE,YAAY,CAAC4D,sBAAsB,CAACQ,QAAQ,CAAC,EAAED,UAAU,CAAC;GAC1E,MAAM;IACL,SAAAK,SAAA,GAAAC,+BAAA,CAA4BJ,WAAW,GAAAK,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;MAAA,IAAAC,WAAA,GAAAF,KAAA,CAAAG,KAAA;QAA7BC,IAAI,GAAAF,WAAA;QAAEG,KAAK,GAAAH,WAAA;MACrB,IAAI,CAACT,UAAU,CAACa,UAAU,CAACF,IAAI,CAAC,EAAE;MAClCR,YAAY,GAAGH,UAAU,CAACd,OAAO,CAACyB,IAAI,EAAEC,KAAK,CAAC;MAC9C;;;;EAKJT,YAAY,GAAGtE,cAAc,CAACsE,YAAY,CAAC;EAC3C,IAAMW,SAAS,GAAGjF,UAAU,CAACsE,YAAY,CAAC;EAE1C,IAAIW,SAAS,CAACC,GAAG,EAAE,OAAOZ,YAAY;;EAEtC,IAAIa,aAAa,CAAIb,YAAY,SAAIhE,GAAG,SAAM,CAAC,EAC7C,OAAOgE,YAAY,UAAOhE,GAAG,UAAM;EACrC,IAAI6E,aAAa,CAACb,YAAY,GAAG,MAAM,CAAC,EAAE,OAAOA,YAAY,GAAG,MAAM;EACtE,IAAIa,aAAa,MAAIb,YAAY,GAAGtE,QAAQ,cAASM,GAAG,SAAM,CAAC,EAC7D,YAAUgE,YAAY,GAAGtE,QAAQ,cAASM,GAAG;EAC/C,IAAI6E,aAAa,CAACb,YAAY,GAAGtE,QAAQ,GAAG,WAAW,CAAC,EACtD,OAAOsE,YAAY,GAAGtE,QAAQ,GAAG,WAAW;EAE9C,IAAImF,aAAa,CAACb,YAAY,UAAOhE,GAAG,UAAM,CAAC,EAC7C,OAAOgE,YAAY,UAAOhE,GAAG,UAAM;EACrC,IAAI6E,aAAa,CAACb,YAAY,GAAG,MAAM,CAAC,EAAE,OAAOA,YAAY,GAAG,MAAM;EACtE,IAAIa,aAAa,MAAIb,YAAY,GAAGtE,QAAQ,cAASM,GAAG,SAAM,CAAC,EAC7D,YAAUgE,YAAY,GAAGtE,QAAQ,cAASM,GAAG;EAC/C,IAAI6E,aAAa,CAACb,YAAY,GAAGtE,QAAQ,GAAG,WAAW,CAAC,EACtD,OAAOsE,YAAY,GAAGtE,QAAQ,GAAG,WAAW;EAE9C,OAAOsE,YAAY;AACrB,CAAC;;ACzKM,IAAMc,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,MAAc;EACrC,OAAOC,MAAM,CAACC,KAAK,CAACF,MAAM,EAAE;IAC1BG,UAAU,EAAE,QAAQ;IACpBC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,iBAAiB;GACjD,CAAC;AACJ,CAAC;AAED,AAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,GAAa;EACpC,OAAOC,QAAQ,CAACD,GAAG,CAAC,CAAC1D,IAAI;AAC3B,CAAC;AAED;;;;;;AAMA,AAAO,IAAM4D,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAI1C,IAAI;EACnC,OAAO2C,CAAC,CAACC,UAAU,CACjBD,CAAC,CAACE,iBAAiB,CAACF,CAAC,CAACG,aAAa,CAAC,EAAE,GAAG9C,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EACzD,IAAI,EACJ,EAAE,EACF,IAAI,CACL;AACH,CAAC;AAED;;;;;;AAMA,AAAO,IAAM+C,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAI/C,IAAI;;EAE5C,IAAMgD,eAAe,GAAGL,CAAC,CAACM,UAAU,CAAC,OAAO,CAAC;EAC7C,IAAMC,uBAAuB,GAAGP,CAAC,CAACM,UAAU,CAAC,eAAe,CAAC;;EAE7D,IAAME,MAAM,GAAGR,CAAC,CAACS,gBAAgB,CAACJ,eAAe,EAAEE,uBAAuB,CAAC;;EAE3E,OAAOP,CAAC,CAACU,cAAc,CAACF,MAAM,EAAE,CAACR,CAAC,CAACM,UAAU,CAACjD,IAAI,CAAC,CAAC,CAAC;AACvD,CAAC;AAGD;;;;;AAKA,AAAO,IAAMsD,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAId,GAAa;EAChD,IAAIe,KAAiB;EACrBC,QAAQ,CAAChB,GAAG,EAAE;IACZiB,wBAAwB,WAAAA,yBAACC,IAAI;MAC3BH,KAAK,GAAGG,IAAI;MACZA,IAAI,CAACC,IAAI,EAAE;;GAEd,CAAC;EACF,OAAOJ,KAAK;AACd,CAAC;AACD;;;;;AAKA,AAAO,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,QAAQ;EAC5C,IAAMC,SAAS,GAAGnB,CAAC,CAACoB,UAAU,CAC5BpB,CAAC,CAACqB,iBAAiB,CAACrB,CAAC,CAACG,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAChDH,CAAC,CAACsB,iBAAiB,CAACtB,CAAC,CAACG,aAAa,CAAC,MAAM,CAAC,CAAC,EAC5C,CAACe,QAAQ,CAACH,IAAI,CAAC,CAChB;EACDG,QAAQ,CAACK,WAAW,CAACJ,SAAS,CAAC;AACjC,CAAC;AAED;;;;;;;AAOA,AAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAcA,CAAIN,QAAQ,EAAE7D,IAAI;EAC3C,IAAI;IACF,IAAMoE,KAAK,GAAGP,QAAQ,CAACQ,KAAK,CAACC,QAAQ,CAACtE,IAAI,CAAC,CAACpD,IAAI;IAChD,OAAOwH,KAAK;GACb,CAAC,OAAO/D,KAAK,EAAE;IACd,OAAO,KAAK,CAAC;;AAEjB,CAAC;;ACvFD,IAAMkE,eAAe,gBAAG,CACtB1H,OAAO,CAACM,GAAG,CAACqH,sBAAsB,IAAI,EAAE,EACxCC,iBAAiB,EAAE;AAMrB,AAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAC9BC,iBAAyB,EACzB1G,QAAgB;EAEhB,IAAI,CAAC8D,aAAa,CAAC4C,iBAAiB,CAAC,EAAE,OAAO,EAAE;EAEhD,IAAMC,QAAQ,GAAG7C,cAAc,CAAC4C,iBAAiB,CAAC;EAClD,IAAME,SAAS,GAAyB,EAAE;;EAE1CA,SAAS,CAACC,eAAe,GAAG,EAAE;EAE9B,SAAA1D,SAAA,GAAAC,+BAAA,CAA0BuD,QAAQ,GAAAtD,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;IAAA,IAAzBwD,WAAW,GAAAzD,KAAA,CAAAG,KAAA;IACpB,IAAMuD,OAAO,GAAGpI,SAAS,CAAC+H,iBAAiB,EAAEI,WAAW,CAAC;IACzD,IAAME,IAAI,GAAGlD,WAAW,CAACiD,OAAO,CAAC;IACjC,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE,EAAE;IAEzB,IAAMC,UAAU,GAAGvI,SAAS,CAACoI,OAAO,EAAE,aAAa,CAAC;IACpD,IAAII,gBAAgB,GAAGxI,SAAS,CAACoI,OAAO,cAAYT,eAAe,UAAO,CAAC;IAC3E,IAAMc,SAAS,GAAAC,QAAA,KAAQvI,wBAAwB,CAAE;;IAGjD,IAAI;MACF,IAAI,CAACgF,aAAa,CAACqD,gBAAgB,CAAC,EAAE;QACpC,IAAI,CAACrD,aAAa,CAACoD,UAAU,CAAC,EAAE;UAC9B,MAAM,IAAII,KAAK,CAAC,SAAS,CAAC;;QAE5BH,gBAAgB,GAAGD,UAAU;;MAG/B,IAAM3G,MAAM,GAAGgH,IAAI,CAACrD,KAAK,CACvBJ,eAAe,CAACqD,gBAAgB,EAAE;QAAEK,QAAQ,EAAE;OAAS,CAAC,CACzD;MACD9H,MAAM,CAAC+H,MAAM,CAACL,SAAS,EAAE7G,MAAM,CAAC;KACjC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;;;IAItBgF,SAAS,CAACM,OAAO,GAAG5F,gBAAgB,CAACsF,SAAS,CAACM,OAAO,IAAIZ,WAAW,CAAC;IACtEM,SAAS,CAACM,OAAO,eAAaN,SAAS,CAACM,OAAS;;IAGjDN,SAAS,CAACrI,KAAK,GAAGJ,cAAc,CAACA,SAAS,CAACoI,OAAO,EAAEK,SAAS,CAACrI,KAAK,CAAC,CAAC;IACrE,IAAI4I,UAAU,GAAehJ,UAAU,CAACyI,SAAS,CAACrI,KAAK,CAAC;IACxD,IAAM6I,QAAQ,GAAGD,UAAU,CAAC5F,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAImF,UAAU,GAAG,KAAK;IAEtB,IAAI,CAACD,QAAQ,IAAI3I,GAAG,EAAE;MACpB0I,UAAU,CAAC5F,IAAI,GAAG4F,UAAU,CAAC5F,IAAI,GAAG,GAAG,GAAG9C,GAAG;MAC7C,OAAO0I,UAAU,CAAC,MAAM,CAAC;MACzB,IAAMG,QAAQ,GAAGnJ,WAAW,CAACgJ,UAAU,CAAC;MAExC,IAAI7D,aAAa,CAACgE,QAAQ,CAAC,EAAE;QAC3BV,SAAS,CAACrI,KAAK,GAAG+I,QAAQ;QAC1BD,UAAU,GAAG,IAAI;;;IAGrB,IAAI,CAACA,UAAU,IAAI,CAAC/D,aAAa,CAACsD,SAAS,CAACrI,KAAK,CAAC,EAAE;;;;IAKpD,IAAIuB,WAAW,CAAC8G,SAAS,EAAEpH,QAAQ,CAAC,IAAI,CAACoH,SAAS,CAAC7I,MAAM,EAAE;IAE3DqI,SAAS,CAACmB,IAAI,CAAAV,QAAA,KACTD,SAAS,CACb,CAAC;IAEFR,SAAS,CAACC,eAAe,CAACO,SAAS,CAACrI,KAAK,CAAC,GAAGqI,SAAS;;EAGxD,OAAOR,SAAS;AAClB,CAAC;AAED;;;;;;AAMA,AAAO,IAAMoB,wBAAwB,GAAG,SAA3BA,wBAAwBA,CACnCzD,GAAa,EACbxB,QAAgB,EAChBkF,UAAgC,EAChCjF,WAA+B;EAE/B,IAAMkF,aAAa,GAAGxI,MAAM,CAAC+H,MAAM,CAAC,EAAE,EAAEQ,UAAU,CAACpB,eAAe,CAAC;EACnE,IAAIsB,UAAU,GAAGF,UAAU,CAAChI,MAAM;EAElCsF,QAAQ,CAAChB,GAAG,EAAE;;IAEZ6D,iBAAiB,WAAAA,kBAACC,QAAQ;MACxB,IAAMpF,YAAY,GAAGJ,cAAc,CACjCwF,QAAQ,CAAC5C,IAAI,CAACzB,MAAM,CAACR,KAAK,EAC1BT,QAAQ,EACRC,WAAW,CACZ;MACD,IAAIkF,aAAa,CAACjF,YAAY,CAAC,EAAE;QAC/B,OAAOiF,aAAa,CAACjF,YAAY,CAAC;QAClCkF,UAAU,EAAE;;MAEd,IAAIA,UAAU,IAAI,CAAC,EAAE;QACnBE,QAAQ,CAAC3C,IAAI,EAAE;;;GAGpB,CAAC;EAEF,IAAM4C,UAAU,GAAyB5I,MAAM,CAAC6I,MAAM,CAACL,aAAa,CAAC;EACrEI,UAAU,CAACzB,eAAe,GAAGqB,aAAa;EAC1C,OAAOI,UAAU;AACnB,CAAC;;AC5GD;;;;;AAKA,AAAO,IAAME,sBAAsB,GAAG,SAAzBA,sBAAsBA,CACjCjE,GAAa,EACb0D,UAAgC;EAEhC,SAAA9E,SAAA,GAAAC,+BAAA,CAAkB6E,UAAU,GAAA5E,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAAE;IAAA,IAAnBmF,GAAG,GAAApF,KAAA,CAAAG,KAAA;IACZ,IAAI;MACF,IAAMzE,KAAK,GAAG0J,GAAG,CAAC1J,KAAK,CAAC2D,KAAK,CAAC/D,QAAQ,CAAC,CAACiE,IAAI,CAAC,GAAG,CAAC;MACjD,IAAM8F,MAAM,GAAGC,QAAQ,CAACpE,GAAG,aAAWkE,GAAG,CAACf,OAAO,eAAU3I,KAAK,OAAI,CAAC;MACrEwF,GAAG,CAACqE,OAAO,CAACC,IAAI,CAACC,OAAO,CAACJ,MAAM,CAAC;;KAEjC,CAAC,OAAOtG,KAAK,EAAE;MACd2G,eAAQ,wCAA8BN,GAAG,CAACf,OAAO,mCAAUtF,KAAO,CAAC;;;AAGzE,CAAC;AAED;;;;;;AAMA,IAAM4G,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIpD,QAAQ,EAAEqC,UAAU;;EAC5C,IAAI,CAACvD,CAAC,CAACuE,YAAY,CAACrD,QAAQ,CAAC,IAAI,CAAClB,CAAC,CAACwE,aAAa,CAACtD,QAAQ,CAAC,EAAE;EAC7D,IAAIxG,aAAa,CAAC,EAAA+J,cAAA,GAAAvD,QAAQ,CAACH,IAAI,cAAA0D,cAAA,GAAbA,cAAA,CAAeC,cAAc,cAAAD,cAAA,GAA7BA,cAAA,CAA+BpH,IAAI,qBAAnCoH,cAAA,CAAqCpH,IAAI,KAAI,EAAE,CAAC,EAAE;EAEpE4D,qBAAqB,CAACC,QAAQ,CAAC;EAE/B,SAAAyD,UAAA,GAAAjG,+BAAA,CAAkB6E,UAAU,GAAAqB,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA/F,IAAA,GAAE;IAAA,IAAnBmF,GAAG,GAAAa,MAAA,CAAA9F,KAAA;IACZ,IAAIiF,GAAG,CAACzJ,cAAc,KAAK,KAAK,EAAE;MAChC4G,QAAQ,CAACH,IAAI,CAAC8D,QAAQ,CAACT,OAAO,CAACrE,gBAAgB,CAACgE,GAAG,CAACf,OAAO,CAAC,CAAC;KAC9D,MAAM;MACL9B,QAAQ,CAACH,IAAI,CAAC8D,QAAQ,CAACxB,IAAI,CAACtD,gBAAgB,CAACgE,GAAG,CAACf,OAAO,CAAC,CAAC;;;AAGhE,CAAC;AAED,IAAM8B,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAI5D,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ;;;EAE1D,IAAI,EAAA0G,eAAA,GAAA7D,QAAQ,CAACH,IAAI,cAAAgE,eAAA,GAAbA,eAAA,CAAevE,MAAM,cAAAuE,eAAA,GAArBA,eAAA,CAAuBC,QAAQ,qBAA/BD,eAAA,CAAiC1H,IAAI,MAAK,eAAe,EAAE;IAC7D,IAAM4H,UAAU,GAAG/D,QAAQ,CAACH,IAAI,CAACmE,SAAS;IAC1C,SAAAC,UAAA,GAAAzG,+BAAA,CAAkB6E,UAAU,GAAA6B,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAvG,IAAA,GAAE;MAAA,IAAnBmF,GAAG,GAAAqB,MAAA,CAAAtG,KAAA;MACZmG,UAAU,CAAC5B,IAAI,CAACjD,yBAAyB,CAAC2D,GAAG,CAACf,OAAO,CAAC,CAAC;;IAEzD;;EAEF,IAAMqC,QAAQ,GAAGnE,QAAQ,CAACoE,GAAG,CAAC,QAAQ,CAAC,CAACA,GAAG,CAAC,MAAM,CAAC;EACnD,IAAID,QAAQ,CAACE,gBAAgB,EAAE,EAAE;IAC/BC,qBAAqB,CAACH,QAAQ,EAAE9B,UAAU,EAAElF,QAAQ,CAAC;GACtD,MAAM;IACLiG,gBAAgB,CAACe,QAAQ,EAAE9B,UAAU,CAAC;;AAE1C,CAAC;AAED,IAAMkC,4BAA4B,GAAG,SAA/BA,4BAA4BA,CAChCC,aAAa,EACbnC,UAAgC,EAChClF,QAAgB,EAChBO,IAAiB;EAEjB,IAAI,CAAC8G,aAAa,EAAE;IAClB;;;EAGF,IAAI1F,CAAC,CAACuE,YAAY,CAACmB,aAAa,CAAC,IAAI1F,CAAC,CAACwE,aAAa,CAACkB,aAAa,CAAC,EAAE;IACnEpB,gBAAgB,CAACoB,aAAa,EAAEnC,UAAU,CAAC;IAC3C3E,IAAI,IAAIA,IAAI,EAAE;IACd;;;EAIF,IAAIoB,CAAC,CAAC2F,uBAAuB,CAACD,aAAa,CAAC,EAAE;IAC5C,IAAME,UAAU,GAAGF,aAAa,CAACJ,GAAG,CAAC,YAAY,CAAC;IAClD,IAAMO,SAAS,GAAGH,aAAa,CAACJ,GAAG,CAAC,WAAW,CAAC;IAChDG,4BAA4B,CAACG,UAAU,EAAErC,UAAU,EAAElF,QAAQ,EAAEO,IAAI,CAAC;IACpE6G,4BAA4B,CAACI,SAAS,EAAEtC,UAAU,EAAElF,QAAQ,EAAEO,IAAI,CAAC;IACnE;;;EAIF,IAAIoB,CAAC,CAAC8F,gBAAgB,CAACJ,aAAa,CAAC,EAAE;IACrCZ,oBAAoB,CAACY,aAAa,EAAEnC,UAAU,EAAElF,QAAQ,CAAC;IACzDO,IAAI,IAAIA,IAAI,EAAE;IACd;;;EAIF,IAAIoB,CAAC,CAAC+F,kBAAkB,CAACL,aAAa,CAAC,EAAE;IACvCpB,gBAAgB,CAACoB,aAAa,EAAEnC,UAAU,CAAC;IAC3C3E,IAAI,IAAIA,IAAI,EAAE;IACd;;;EAIF,IAAIoB,CAAC,CAACgG,mBAAmB,CAACN,aAAa,CAAC,EAAE;IACxC,IAAMO,IAAI,GAAGP,aAAa,CAACJ,GAAG,CAAC,MAAM,CAAC;IACtC,IAAMY,KAAK,GAAGR,aAAa,CAACJ,GAAG,CAAC,OAAO,CAAC;IACxCG,4BAA4B,CAACQ,IAAI,EAAE1C,UAAU,EAAElF,QAAQ,EAAEO,IAAI,CAAC;IAC9D6G,4BAA4B,CAACS,KAAK,EAAE3C,UAAU,EAAElF,QAAQ,EAAEO,IAAI,CAAC;IAC/D;;EAGF,IAAIoB,CAAC,CAACmG,gBAAgB,CAACT,aAAa,CAAC,EAAE;IACrCU,oBAAoB,CAACV,aAAa,EAAEnC,UAAU,EAAElF,QAAQ,CAAC;IACzD;;EAGF,IAAI2B,CAAC,CAACqG,YAAY,CAACX,aAAa,CAAC,EAAE;IACjCY,gBAAgB,CAACZ,aAAa,EAAEnC,UAAU,EAAElF,QAAQ,CAAC;IACrD;;EAGF,IAAI2B,CAAC,CAACuG,oBAAoB,CAACb,aAAa,CAAC,EAAE;IACzCc,wBAAwB,CAACd,aAAa,EAAEnC,UAAU,EAAElF,QAAQ,CAAC;;AAEjE,CAAC;AAED;;;;;;AAMA,IAAMmH,qBAAqB,GAAG,SAAxBA,qBAAqBA,CACzBtE,QAAuB,EACvBqC,UAAgC,EAChClF,QAAgB;EAEhB,IAAI;IACF,IAAIoI,SAAS,GAAG,KAAK;IACrB,IAAMC,CAAC,GAAGxF,QAAQ,CAACoE,GAAG,CAAC,MAAM,CAA+B;IAC5D,IAAMqB,QAAQ,GAAGD,CAAC,CAACpB,GAAG,CAAC,MAAM,CAAC;IAC9BqB,QAAQ,CAACC,OAAO,CAAC,UAAChG,KAAK;MACrB,IAAIZ,CAAC,CAAC6G,iBAAiB,CAACjG,KAAK,CAAC,IAAI,CAAC6F,SAAS,EAAE;;QAE5CA,SAAS,GAAG,IAAI;QAEhB7F,KAAK,CAACG,IAAI,CAAC+F,qBAAqB,GAAG,uBAAuB;QAC1D,IAAMpB,aAAa,GAAG9E,KAAK,CAAC0E,GAAG,CAAC,UAAU,CAAC;QAC3CG,4BAA4B,CAC1BC,aAAa,EACbnC,UAAU,EACVlF,QAAQ,EACR;UACEuC,KAAK,CAACmG,IAAI,EAAE;SACb,CACF;;;MAGH,IAAI/G,CAAC,CAACgH,aAAa,CAACpG,KAAK,CAAC,EAAE;QAC1B4E,qBAAqB,CAAC5E,KAAK,EAAE2C,UAAU,EAAElF,QAAQ,CAAC;QAClD;;KAEH,CAAC;GACH,CAAC,OAAOX,KAAK,EAAE;AAClB,CAAC;AAED;;;;AAIA,IAAM0I,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIlF,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ;;EAC1D,KAAA4I,eAAA,GAAI/F,QAAQ,CAACH,IAAI,cAAAkG,eAAA,GAAbA,eAAA,CAAeC,UAAU,aAAzBD,eAAA,CAA2B5J,IAAI,EAAE;IACnC,OAAO8J,kBAAkB,CACvB3F,cAAc,CAACN,QAAQ,EAAEA,QAAQ,CAACH,IAAI,CAACmG,UAAU,CAAC7J,IAAI,CAAC,EACvDkG,UAAU,EACVlF,QAAQ,CACT;;EAEH,OAAOoH,4BAA4B,CACjCvE,QAAQ,CAACoE,GAAG,CAAC,YAAY,CAAC,EAC1B/B,UAAU,EACVlF,QAAQ,CACT;AACH,CAAC;AAED;;;AAGA,IAAM+I,WAAW,GAAG,SAAdA,WAAWA,CAAIlG,QAAQ,EAAEmG,WAAW,EAAEhJ,QAAQ;EAClDwC,QAAQ,CACNK,QAAQ,CAACH,IAAI,EACb;IACEuG,WAAW,WAAAA,YAAC1G,KAAK;;MACf,IAAI,EAAA2G,cAAA,GAAA3G,KAAK,CAACG,IAAI,CAACyG,GAAG,qBAAdD,cAAA,CAAgBlK,IAAI,MAAK,QAAQ,EAAE;MACvCmI,qBAAqB,CAAC5E,KAAK,EAAEyG,WAAW,EAAEhJ,QAAQ,CAAC;MACnDuC,KAAK,CAACI,IAAI,EAAE;;GAEf,EACDE,QAAQ,CAACQ,KAAK,EACdR,QAAQ,CACT;AACH,CAAC;AAED,IAAMoF,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBpF,QAAgC,EAChCqC,UAAgC,EAChClF,QAAgB;;EAGhB,IAAMoJ,aAAa,GAAGvG,QAAQ,CAACH,IAAI,CAAC1D,IAAI;EACxC,OAAO8J,kBAAkB,CACvB3F,cAAc,CAACN,QAAQ,EAAEuG,aAAa,CAAC,EACvClE,UAAU,EACVlF,QAAQ,CACT;AACH,CAAC;AAED;;;AAGA,IAAMqJ,6BAA6B,GAAG,SAAhCA,6BAA6BA,CACjCC,YAAiD,EACjDpE,UAAgC,EAChClF,QAAgB;EAEhB,IAAMuJ,YAAY,GAAGD,YAAY,CAACrC,GAAG,CAAC,MAAM,CAAC;;EAE7C,IAAItF,CAAC,CAACuF,gBAAgB,CAACqC,YAAY,CAAC7G,IAAI,CAAC,EAAE;IACzCyE,qBAAqB,CAACmC,YAAY,EAAEpE,UAAU,EAAElF,QAAQ,CAAC;IACzD;;EAEF,IAAI2B,CAAC,CAAC8F,gBAAgB,CAAC8B,YAAY,CAAC7G,IAAI,CAAC,EAAE;IACzCoG,kBAAkB,CAACQ,YAAY,EAAEpE,UAAU,EAAElF,QAAQ,CAAC;IACtD;;EAEFiG,gBAAgB,CAACsD,YAAY,EAAErE,UAAU,CAAC;AAC5C,CAAC;AAED;;;;AAIA,IAAMiD,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAC5BtF,QAAwC,EACxCqC,UAAgC,EAChClF,QAAgB;EAEhB,IAAMwJ,aAAa,GAAG3G,QAAQ,CAACoE,GAAG,CAAC,MAAM,CAAC;EAC1C,OAAO6B,kBAAkB,CAACU,aAAa,EAAEtE,UAAU,EAAElF,QAAQ,CAAC;AAChE,CAAC;AAED;;;;;;AAMA,AAAO,IAAM8I,kBAAkB,GAAG,SAArBA,kBAAkBA,CAC7BjG,QAAuB,EACvBqC,UAAgC,EAChClF,QAAgB;EAEhB,IAAI,CAAC6C,QAAQ,IAAI,CAACA,QAAQ,CAACH,IAAI,EAAE;EACjC,QAAQG,QAAQ,CAACH,IAAI,CAACjG,IAAI;IACxB,KAAK,YAAY;;MACfwL,gBAAgB,CAACpF,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MAChD;IACF,KAAK,oBAAoB;;MACvBmI,wBAAwB,CAACtF,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MACxD;IACF,KAAK,yBAAyB;;MAC5BqJ,6BAA6B,CAACxG,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MAC7D;IACF,KAAK,qBAAqB,CAAC;IAC3B,KAAK,oBAAoB;;MACvBmH,qBAAqB,CAACtE,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MACrD;IACF,KAAK,gBAAgB;;MACnB+H,oBAAoB,CAAClF,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MACpD;IACF,KAAK,kBAAkB;IACvB,KAAK,iBAAiB;MACpB+I,WAAW,CAAClG,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MAC3C;IACF,KAAK,gBAAgB;MACnByG,oBAAoB,CAAC5D,QAAQ,EAAEqC,UAAU,EAAElF,QAAQ,CAAC;MACpD;IACF,KAAK,YAAY;;MACfiG,gBAAgB,CAACpD,QAAQ,EAAEqC,UAAU,CAAC;MACtC;;AAIN,CAAC;AAED;;;;AAIA,AAAO,IAAMuE,8BAA8B,GAAG,SAAjCA,8BAA8BA,CAAIjI,GAAa;EAC1D,IAAIkI,sBAAsB,GAAG,KAAK;EAClClH,QAAQ,CAAChB,GAAG,EAAE;IACZ6D,iBAAiB,EAAE,SAAAA,kBAACsE,MAAM;;MACxB,IAAIA,MAAM,CAACjH,IAAI,CAACzB,MAAM,CAACR,KAAK,KAAK,oBAAoB,EAAE;MAEvDiJ,sBAAsB,GAAG,IAAI;MAC7B,IAAIE,sBAAsB,IAAAC,oBAAA,GAAGF,MAAM,CAACjH,IAAI,CAACoH,UAAU,qBAAtBD,oBAAA,CAAwB1M,IAAI,CACvD,UAACuF,IAAI;QAAA,OAAKA,IAAI,CAACqH,KAAK,CAAC/K,IAAI,KAAK,MAAM;QACrC;MACD,IAAI4K,sBAAsB,EAAE;QAC1BD,MAAM,CAAChH,IAAI,EAAE;QACb;;MAGF,IAAMqH,cAAc,GAAGL,MAAM,CAACjH,IAAI,CAACoH,UAAU,CAACG,GAAG,CAAC,UAACC,EAAE;QAAA,OAAKA,EAAE,CAACH,KAAK,CAAC/K,IAAI;QAAC;MACxEgL,cAAc,CAAChF,IAAI,CAAC,MAAM,CAAC;MAC3B,IAAMmF,SAAS,GAAGvE,QAAQ,CAACpE,GAAG,cACjBwI,cAAc,CAACnK,IAAI,CAAC,GAAG,CAAC,gCAA6B,CACjE;MACD8J,MAAM,CAACzG,WAAW,CAACiH,SAAS,CAAC;MAC7BR,MAAM,CAAChH,IAAI,EAAE;;GAEhB,CAAC;EAEF,IAAI+G,sBAAsB,EAAE;EAE5B,IAAMS,SAAS,GAAGvE,QAAQ,CAACpE,GAAG,4CAA4C,CAAC;EAC3EA,GAAG,CAACqE,OAAO,CAACC,IAAI,CAACC,OAAO,CAACoE,SAAS,CAAC;AACrC,CAAC;;ACxUD;AACA,IAAIC,sBAA4C;AAEhD;AACA,IAAMC,cAAc,gBAAG,IAAIC,GAAG,EAAE;AAEhC;;;;;;;;AAQA,SAASC,sBAAsBA,CAC7BtJ,MAAc,EACduJ,OAAsB,EACtBxK,QAAgB,EAChB/C,QAAgB,EAChBwN,YAAoC;EAEpC,IAAI,CAACD,OAAO,CAAChP,MAAM,EAAE;IACnB,OAAOyF,MAAM;;;EAIf,IACEA,MAAM,CAACrD,QAAQ,CAAC,eAAe,CAAC,IAChCqD,MAAM,CAACrD,QAAQ,CAAC,mBAAmB,CAAC,EACpC;IACA,OAAOqD,MAAM;;EAGf,IAAMyJ,cAAc,GAAG7M,SAAS,CAACoD,MAAM,CAAC;EACxC,IAAIoJ,cAAc,CAACpD,GAAG,CAACyD,cAAc,CAAC,EAAE;;IAEtC,OAAOL,cAAc,CAACpD,GAAG,CAACyD,cAAc,CAAC;;;EAI3C,IAAI3N,cAAc,CAACyN,OAAO,CAAC9O,YAAY,EAAEuB,QAAQ,CAAC,EAAE,OAAOgE,MAAM;;EAGjE,IAAI,CAAC3D,cAAc,CAACkN,OAAO,CAAC/O,YAAY,EAAEwB,QAAQ,CAAC,EAAE,OAAOgE,MAAM;;EAGlE,IAAI,CAACmJ,sBAAsB,EAAE;IAC3B,IAAMO,OAAO,GAAGjH,mBAAmB,CAAC8G,OAAO,CAAC7O,cAAc,IAAI,EAAE,EAAEsB,QAAQ,CAAC;IAC3EmN,sBAAsB,GAAGO,OAAO;;EAGlC,IAAI,CAACP,sBAAsB,CAAClN,MAAM,EAAE,OAAO+D,MAAM;EAEjD,IAAMO,GAAG,GAAGR,QAAQ,CAACC,MAAM,CAAC;EAC5B,IAAM2J,iBAAiB,GAAGtI,oBAAoB,CAACd,GAAG,CAAC;EAEnD,IAAI,CAACoJ,iBAAiB,EAAE;IACtB5E,eAAQ,+LAE0C/I,QAAQ,2EACxD+C,QAAQ,CACT;IACD,OAAOiB,MAAM;;EAGf,IAAM4J,sBAAsB,GAAG5F,wBAAwB,CACrDzD,GAAG,EACHxB,QAAQ,EACRoK,sBAAsB,EACtBzN,MAAM,CAACmO,OAAO,CAACL,YAAY,CAAC,CAC7B;EACDhB,8BAA8B,CAACjI,GAAG,CAAC;EACnCiE,sBAAsB,CAACjE,GAAG,EAAEqJ,sBAAsB,CAAC;EACnD/B,kBAAkB,CAChB8B,iBAAiB,CAAC3D,GAAG,CAAC,aAAa,CAAC,EACpC4D,sBAAsB,EACtB7K,QAAQ,CACT;EAED,IAAM+K,cAAc,GAAGxJ,QAAQ,CAACC,GAAG,CAAC;EACpC,IAAMwJ,WAAW,GAAGnN,SAAS,CAACkN,cAAc,CAAC;EAC7CV,cAAc,CAACY,GAAG,CAACD,WAAW,EAAED,cAAc,CAAC;EAC/CV,cAAc,CAACY,GAAG,CAACP,cAAc,EAAEK,cAAc,CAAC;EAElD,OAAOA,cAAc;AACvB;;AC7FA;;;;;AAKA,IAAMG,WAAW,gBAAG,IAAIZ,GAAG,EAAkC;AAE7D,gBAAwBrJ,MAAM;EAC5B,IAAIuJ,OAAO,GAAGW,sBAAU,CAAC,IAAI,CAAC;EAC9B,IAAIX,OAAO,IAAI,CAACjO,aAAa,CAACiO,OAAO,EAAE,QAAQ,CAAC,EAAE;IAChDxE,eAAQ,sBAEN,yCAAyC,CAC1C;IACD;;;;;;EAMFwE,OAAO,GAAAlG,QAAA,KACF/I,sBAAsB,EACtBiP,OAAO,CACX;EAED,IAAsBxK,QAAQ,GAAmB,IAAI,CAA7CoL,YAAY;IAAAC,aAAA,GAA6B,IAAI,CAArBC,OAAO;IAAPA,OAAO,GAAAD,aAAA,cAAG,EAAE,GAAAA,aAAA;EAE5C,IAAME,aAAa,GAAGL,WAAW,CAACjE,GAAG,CAACjH,QAAQ,CAAC,IAAI,EAAE;EACrD,IAAMwL,QAAQ,GAAGF,OAAO,CAACE,QAAQ,IAAID,aAAa,CAACC,QAAQ;EAC3D,IAAMvO,QAAQ,GAAGqO,OAAO,CAACtM,IAAI,IAAIuM,aAAa,CAACvM,IAAI;EAEnD,IAAI,CAACwM,QAAQ,EAAE;IACb,OAAOvK,MAAM;;EAGf,IAAI,CAACwK,gBAAS,CAACC,IAAI,CAAC,CAAC9N,QAAQ,CAAC4N,QAAQ,CAAC,EAAE;IAAA,IAAAG,qBAAA;IACvCT,WAAW,CAACD,GAAG,CAACjL,QAAQ,EAAE;MAAEwL,QAAQ,EAARA,QAAQ;MAAExM,IAAI,EAAE/B;KAAU,CAAC;IACvD,IAAMwN,YAAY,IAAAkB,qBAAA,GAAG,IAAI,CAACC,SAAS,CAACpB,OAAO,cAAAmB,qBAAA,GAAtBA,qBAAA,CAAwBE,OAAO,qBAA/BF,qBAAA,CAAiCG,KAAK;IAE3D,IAAI;MACF,OAAOvB,sBAAsB,CAC3BtJ,MAAM,EACNuJ,OAAO,EACPxK,QAAQ,EACR/C,QAAQ,EACRwN,YAAY,CACb;KACF,CAAC,OAAOpL,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAO4B,MAAM;;;EAIjB,OAAOA,MAAM;AACf;;;;"}